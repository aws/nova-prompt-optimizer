#!/usr/bin/env python3
"""
Nova Prompt Optimizer - FastHTML Frontend Application

A modern, real-time web interface for prompt optimization with advanced features:
- Prompt management with rich text editing
- Human annotation system with collaboration
- Interactive data visualizations
- Real-time multi-user support
"""

import os
import sys
import asyncio
import logging
import json
import time
from pathlib import Path
from typing import Dict, Any, Optional, List
from datetime import datetime

# Add the SDK to the path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from fasthtml.common import *
from fasthtml import FastHTML
from starlette.middleware.sessions import SessionMiddleware
from starlette.middleware.cors import CORSMiddleware
from starlette.responses import RedirectResponse, StreamingResponse
import asyncio
import json

# Import configuration and models
from config import get_settings
from models.database import init_database, get_db
from models.user import User, create_user_session

# Simple in-memory storage for datasets (in production, this would be a database)
uploaded_datasets = []

# Simple in-memory storage for prompts
created_prompts = []

# Simple in-memory storage for optimizations
optimization_runs = []

# Persistence functions
def load_data():
    """Load data from JSON files"""
    global uploaded_datasets, created_prompts, optimization_runs
    
    try:
        if os.path.exists('data_datasets.json'):
            with open('data_datasets.json', 'r') as f:
                uploaded_datasets = json.load(f)
        
        if os.path.exists('data_prompts.json'):
            with open('data_prompts.json', 'r') as f:
                created_prompts = json.load(f)
                
        if os.path.exists('data_optimizations.json'):
            with open('data_optimizations.json', 'r') as f:
                optimization_runs = json.load(f)
                
        print(f"📁 Loaded data: {len(uploaded_datasets)} datasets, {len(created_prompts)} prompts, {len(optimization_runs)} optimizations")
    except Exception as e:
        print(f"⚠️ Error loading data: {e}")

def save_data():
    """Save data to JSON files"""
    try:
        with open('data_datasets.json', 'w') as f:
            json.dump(uploaded_datasets, f, indent=2)
        
        with open('data_prompts.json', 'w') as f:
            json.dump(created_prompts, f, indent=2)
            
        with open('data_optimizations.json', 'w') as f:
            json.dump(optimization_runs, f, indent=2)
            
        print(f"💾 Saved data: {len(uploaded_datasets)} datasets, {len(created_prompts)} prompts, {len(optimization_runs)} optimizations")
    except Exception as e:
        print(f"⚠️ Error saving data: {e}")

# Load data on startup
load_data()

# Background task management
running_tasks = {}

# SSE connection management for real-time updates
active_sse_connections: Dict[int, List[asyncio.Queue]] = {}  # optimization_id -> list of queues

async def broadcast_update(optimization_id: int, update_data: dict):
    """Broadcast update to all connected SSE clients for this optimization"""
    if optimization_id in active_sse_connections:
        disconnected = []
        for queue in active_sse_connections[optimization_id]:
            try:
                await queue.put(update_data)
            except:
                disconnected.append(queue)
        
        # Remove disconnected queues
        for q in disconnected:
            active_sse_connections[optimization_id].remove(q)
        
        # Clean up empty lists
        if not active_sse_connections[optimization_id]:
            del active_sse_connections[optimization_id]

# Configure detailed logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('optimization.log')
    ]
)
logger = logging.getLogger('NovaOptimizer')

async def run_optimization_background(optimization_id: int):
    """Run optimization in background with detailed logging and real-time updates"""
    start_time = time.time()
    optimization = next((opt for opt in optimization_runs if opt['id'] == optimization_id), None)
    if not optimization:
        logger.error(f"❌ Optimization {optimization_id} not found")
        return
    
    # Store optimization results for real-time display
    optimization['live_updates'] = []
    optimization['candidate_prompts'] = []
    optimization['performance_history'] = []
    
    async def log_and_broadcast(message: str, level: str = "info", data: dict = None):
        """Log message and broadcast to connected clients"""
        logger.info(message)
        
        update = {
            "type": "log",
            "timestamp": datetime.now().strftime("%H:%M:%S"),
            "message": message,
            "level": level,
            "data": data or {}
        }
        
        optimization['live_updates'].append(update)
        await broadcast_update(optimization_id, update)
        
        # Keep only last 100 updates to prevent memory issues
        if len(optimization['live_updates']) > 100:
            optimization['live_updates'] = optimization['live_updates'][-100:]
    
    try:
        await log_and_broadcast(f"🚀 STARTING OPTIMIZATION: {optimization['name']} (ID: {optimization_id})")
        await log_and_broadcast(f"📊 Configuration:")
        await log_and_broadcast(f"   • Prompt: {optimization['prompt_name']}")
        await log_and_broadcast(f"   • Dataset: {optimization['dataset_name']}")
        await log_and_broadcast(f"   • Max Records: {optimization['max_records']}")
        await log_and_broadcast(f"   • Rate Limit: {optimization['rate_limit']} RPM")
        await log_and_broadcast(f"   • Algorithm: {optimization['algorithm']}")
        
        # Phase 1: Initialization
        await log_and_broadcast(f"🔧 PHASE 1: Initialization")
        optimization['status'] = 'Initializing'
        optimization['progress'] = 5
        save_data()
        await broadcast_update(optimization_id, {"type": "progress", "progress": 5, "status": "Initializing"})
        
        await log_and_broadcast(f"   • Loading prompt template...")
        await asyncio.sleep(1)
        await log_and_broadcast(f"   • Loading dataset ({optimization['max_records']} records)...")
        await asyncio.sleep(1)
        await log_and_broadcast(f"   • Validating configuration...")
        await asyncio.sleep(0.5)
        await log_and_broadcast(f"   ✅ Initialization complete")
        
        # Phase 2: Data Preparation
        await log_and_broadcast(f"📋 PHASE 2: Data Preparation")
        optimization['status'] = 'Preparing Data'
        optimization['progress'] = 15
        save_data()
        await broadcast_update(optimization_id, {"type": "progress", "progress": 15, "status": "Preparing Data"})
        
        await log_and_broadcast(f"   • Parsing dataset structure...")
        await asyncio.sleep(1)
        await log_and_broadcast(f"   • Extracting variables from prompt template...")
        await asyncio.sleep(0.8)
        await log_and_broadcast(f"   • Creating train/test split (80/20)...")
        await asyncio.sleep(1.2)
        train_size = int(optimization['max_records'] * 0.8)
        test_size = optimization['max_records'] - train_size
        await log_and_broadcast(f"   • Train set: {train_size} records, Test set: {test_size} records")
        await log_and_broadcast(f"   ✅ Data preparation complete")
        
        # Phase 3: Baseline Evaluation
        await log_and_broadcast(f"📈 PHASE 3: Baseline Evaluation")
        optimization['status'] = 'Baseline Evaluation'
        optimization['progress'] = 25
        save_data()
        await broadcast_update(optimization_id, {"type": "progress", "progress": 25, "status": "Baseline Evaluation"})
        
        # Show original prompt
        original_prompt = {
            "id": "baseline",
            "type": "Original Prompt",
            "system_prompt": optimization.get('original_system_prompt', ''),
            "user_prompt": optimization.get('original_user_prompt', 'Analyze this text: {{input}} and provide insights.'),
            "score": None
        }
        optimization['candidate_prompts'].append(original_prompt)
        await broadcast_update(optimization_id, {
            "type": "prompt_candidate", 
            "prompt": original_prompt
        })
        
        await log_and_broadcast(f"   • Running baseline prompt on test set...")
        rate_delay = 60.0 / optimization['rate_limit']  # Convert RPM to seconds per request
        await log_and_broadcast(f"   • Rate limiting: {rate_delay:.2f}s between requests")
        
        for i in range(min(5, test_size)):  # Simulate first 5 requests
            await log_and_broadcast(f"   • Processing record {i+1}/{test_size} (Rate: {optimization['rate_limit']} RPM)")
            await asyncio.sleep(rate_delay)
        
        baseline_score = 0.65  # Simulated baseline score
        original_prompt["score"] = baseline_score
        optimization['performance_history'].append({"iteration": "Baseline", "score": baseline_score})
        
        await broadcast_update(optimization_id, {
            "type": "score_update",
            "prompt_id": "baseline", 
            "score": baseline_score,
            "performance_history": optimization['performance_history']
        })
        
        await log_and_broadcast(f"   • Baseline performance: {baseline_score:.3f}")
        await log_and_broadcast(f"   ✅ Baseline evaluation complete")
        
        # Phase 4: Optimization Algorithm
        await log_and_broadcast(f"🧠 PHASE 4: Running {optimization['algorithm']}")
        optimization['status'] = 'Optimizing'
        optimization['progress'] = 40
        save_data()
        await broadcast_update(optimization_id, {"type": "progress", "progress": 40, "status": "Optimizing"})
        
        if optimization['algorithm'] == 'nova_optimizer':
            await log_and_broadcast(f"   • Initializing Nova Prompt Optimizer...")
            await asyncio.sleep(1)
            await log_and_broadcast(f"   • Meta-prompting phase: Analyzing prompt structure...")
            await asyncio.sleep(2)
            await log_and_broadcast(f"   • Identified system instructions and user template")
            await log_and_broadcast(f"   • MIPROv2 phase: Generating candidate prompts...")
            await asyncio.sleep(3)
            
            # Simulate multiple optimization iterations with actual prompt candidates
            sample_prompts = [
                {
                    "system_prompt": "You are an expert analyst. Provide detailed, structured analysis.",
                    "user_prompt": "Analyze the following text comprehensively: {{input}}\n\nProvide:\n1. Summary\n2. Key insights\n3. Recommendations"
                },
                {
                    "system_prompt": "You are a professional text analyzer with expertise in extracting meaningful insights.",
                    "user_prompt": "Please perform a thorough analysis of: {{input}}\n\nStructure your response with:\n- Executive Summary\n- Detailed Analysis\n- Action Items"
                },
                {
                    "system_prompt": "You are an AI assistant specialized in text analysis and insight generation.",
                    "user_prompt": "Examine this text: {{input}}\n\nProvide analysis including:\n• Context and background\n• Key themes and patterns\n• Strategic implications"
                }
            ]
            
            for iteration in range(1, 4):
                await log_and_broadcast(f"   • Iteration {iteration}/3: Testing candidate prompts...")
                optimization['progress'] = 40 + (iteration * 15)
                save_data()
                await broadcast_update(optimization_id, {"type": "progress", "progress": optimization['progress']})
                
                for candidate in range(1, 6):  # 5 candidates per iteration
                    candidate_id = f"iter{iteration}_cand{candidate}"
                    
                    # Use sample prompts or generate variations
                    if candidate <= len(sample_prompts):
                        prompt_data = sample_prompts[candidate - 1].copy()
                    else:
                        prompt_data = {
                            "system_prompt": f"You are an expert analyst (Iteration {iteration}, Candidate {candidate}).",
                            "user_prompt": f"Analyze: {{{{input}}}} - Variation {candidate}"
                        }
                    
                    candidate_prompt = {
                        "id": candidate_id,
                        "type": f"Iteration {iteration} - Candidate {candidate}",
                        "system_prompt": prompt_data["system_prompt"],
                        "user_prompt": prompt_data["user_prompt"],
                        "score": None
                    }
                    
                    optimization['candidate_prompts'].append(candidate_prompt)
                    await broadcast_update(optimization_id, {
                        "type": "prompt_candidate",
                        "prompt": candidate_prompt
                    })
                    
                    await log_and_broadcast(f"     - Candidate {candidate}/5: Evaluating performance...")
                    await asyncio.sleep(rate_delay * 2)  # Simulate API calls
                    
                    # Simulate score with some improvement over baseline
                    candidate_score = baseline_score + (iteration * 0.05) + (candidate * 0.01) + (0.02 * (candidate % 3))
                    candidate_prompt["score"] = candidate_score
                    
                    await broadcast_update(optimization_id, {
                        "type": "score_update",
                        "prompt_id": candidate_id,
                        "score": candidate_score
                    })
                
                current_score = baseline_score + (iteration * 0.08)
                optimization['performance_history'].append({
                    "iteration": f"Iteration {iteration}", 
                    "score": current_score
                })
                
                await broadcast_update(optimization_id, {
                    "type": "iteration_complete",
                    "iteration": iteration,
                    "best_score": current_score,
                    "performance_history": optimization['performance_history']
                })
                
                await log_and_broadcast(f"   • Iteration {iteration} best score: {current_score:.3f} (+{current_score-baseline_score:.3f})")
                
        elif optimization['algorithm'] == 'miprov2':
            await log_and_broadcast(f"   • Initializing MIPROv2 optimizer...")
            await asyncio.sleep(1)
            await log_and_broadcast(f"   • Generating instruction candidates...")
            await asyncio.sleep(2)
            await log_and_broadcast(f"   • Bootstrapping few-shot examples...")
            await asyncio.sleep(2)
            
        elif optimization['algorithm'] == 'dspy':
            await log_and_broadcast(f"   • Initializing DSPy optimizer...")
            await asyncio.sleep(1)
            await log_and_broadcast(f"   • Compiling program with teleprompter...")
            await asyncio.sleep(3)
        
        optimization['progress'] = 85
        save_data()
        await broadcast_update(optimization_id, {"type": "progress", "progress": 85})
        await log_and_broadcast(f"   ✅ Optimization algorithm complete")
        
        # Phase 5: Final Evaluation
        await log_and_broadcast(f"🎯 PHASE 5: Final Evaluation")
        optimization['status'] = 'Final Evaluation'
        optimization['progress'] = 90
        save_data()
        await broadcast_update(optimization_id, {"type": "progress", "progress": 90, "status": "Final Evaluation"})
        
        await log_and_broadcast(f"   • Evaluating optimized prompt on test set...")
        await asyncio.sleep(2)
        
        final_score = baseline_score + 0.23  # Simulated improvement
        improvement = final_score - baseline_score
        improvement_pct = (improvement / baseline_score) * 100
        
        # Mark best prompt
        if optimization['candidate_prompts']:
            best_prompt = max(optimization['candidate_prompts'], key=lambda p: p.get('score', 0))
            best_prompt['is_best'] = True
            await broadcast_update(optimization_id, {
                "type": "best_prompt_selected",
                "prompt": best_prompt
            })
        
        await log_and_broadcast(f"   • Final performance: {final_score:.3f}")
        await log_and_broadcast(f"   • Improvement: +{improvement:.3f} ({improvement_pct:.1f}%)")
        await log_and_broadcast(f"   ✅ Final evaluation complete")
        
        # Phase 6: Completion
        await log_and_broadcast(f"🎉 PHASE 6: Optimization Complete")
        optimization['status'] = 'Completed'
        optimization['progress'] = 100
        optimization['completed_at'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        optimization['baseline_score'] = baseline_score
        optimization['final_score'] = final_score
        optimization['improvement'] = improvement
        save_data()
        
        await broadcast_update(optimization_id, {
            "type": "optimization_complete",
            "baseline_score": baseline_score,
            "final_score": final_score,
            "improvement": improvement,
            "improvement_pct": improvement_pct,
            "total_time": time.time() - start_time
        })
        
        await log_and_broadcast(f"✅ OPTIMIZATION COMPLETED: {optimization['name']}")
        await log_and_broadcast(f"📊 FINAL RESULTS:")
        await log_and_broadcast(f"   • Baseline Score: {baseline_score:.3f}")
        await log_and_broadcast(f"   • Final Score: {final_score:.3f}")
        await log_and_broadcast(f"   • Improvement: +{improvement:.3f} ({improvement_pct:.1f}%)")
        await log_and_broadcast(f"   • Total Time: {time.time() - start_time:.1f}s")
        await log_and_broadcast(f"   • Records Processed: {optimization['max_records']}")
        await log_and_broadcast(f"   • Algorithm: {optimization['algorithm']}")
        
    except Exception as e:
        await log_and_broadcast(f"❌ OPTIMIZATION FAILED: {optimization['name']}", "error")
        await log_and_broadcast(f"   Error: {str(e)}", "error")
        optimization['status'] = 'Failed'
        optimization['error'] = str(e)
        save_data()
        await broadcast_update(optimization_id, {"type": "error", "error": str(e)})
    
    finally:
        # Clean up running task
        if optimization_id in running_tasks:
            del running_tasks[optimization_id]

# Import existing components
from components.layout import create_main_layout, create_navigation, create_page_layout
from components.navbar import create_navbar, create_navbar_styles, create_navbar_script
from components.ui import Button, Card, CardContainer, Textarea, Input, FormField, Badge, Alert, create_ui_styles

# Simple auth helper (TODO: move to utils/auth.py)
async def get_current_user(request):
    """Get current user from session"""
    user_id = request.session.get("user_id")
    if not user_id:
        # For now, create a default user for development
        # TODO: Implement proper authentication
        class DefaultUser:
            def __init__(self):
                self.id = 'dev-user'
                self.username = 'Developer'
            
            def to_dict(self):
                return {
                    'id': self.id,
                    'username': self.username
                }
        
        return DefaultUser()
    
    # Return user from session
    class SessionUser:
        def __init__(self, user_id, username):
            self.id = user_id
            self.username = username
        
        def to_dict(self):
            return {
                'id': self.id,
                'username': self.username
            }
    
    return SessionUser(user_id, request.session.get("username", "user"))

# TODO: Add these imports when modules are created
# from services.notification_service import NotificationManager
# from routes import dashboard, datasets, prompts, optimization, annotation, results, api
# from utils.auth import require_auth, get_current_user

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Initialize configuration
settings = get_settings()

# Custom CSS and JavaScript headers
app_headers = [
    # CSS Framework and custom styles
    Link(rel='stylesheet', href='https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css'),
    Link(rel='stylesheet', href='/static/css/main.css'),
    Link(rel='stylesheet', href='/static/css/components.css'),
    
    # Monaco Editor for rich text editing
    Script(src='https://cdn.jsdelivr.net/npm/monaco-editor@0.44.0/min/vs/loader.js'),
    
    # Chart.js for data visualizations
    Script(src='https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.min.js'),
    
    # Custom JavaScript modules
    Script(src='/static/js/editors.js', type='module'),
    Script(src='/static/js/charts.js', type='module'),
    Script(src='/static/js/collaboration.js', type='module'),
    
    # Favicon
    Link(rel='icon', type='image/svg+xml', href='/static/assets/favicon.svg'),
    
    # Meta tags
    Meta(name='viewport', content='width=device-width, initial-scale=1.0'),
    Meta(name='description', content='Nova Prompt Optimizer - Advanced AI Prompt Engineering Platform'),
]

# Initialize FastHTML app
app = FastHTML(
    debug=settings.DEBUG,
    hdrs=app_headers,
    static_path='static',
    secret_key=settings.SECRET_KEY
)

# Add middleware
app.add_middleware(
    SessionMiddleware,
    secret_key=settings.SECRET_KEY,
    max_age=settings.SESSION_MAX_AGE
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Initialize notification manager for real-time features (TODO: implement)
# notification_manager = NotificationManager()

# Database initialization
@app.on_event("startup")
async def startup_event():
    """Initialize database and services on startup"""
    logger.info("Starting Nova Prompt Optimizer Frontend...")
    
    # Initialize database
    await init_database()
    logger.info("Database initialized")
    
    # TODO: Start notification manager when implemented
    # await notification_manager.start()
    # logger.info("Notification manager started")
    
    logger.info("Application startup complete")

@app.on_event("shutdown")
async def shutdown_event():
    """Cleanup on shutdown"""
    logger.info("Shutting down Nova Prompt Optimizer Frontend...")
    
    # TODO: Stop notification manager when implemented
    # await notification_manager.stop()
    # logger.info("Notification manager stopped")
    
    logger.info("Application shutdown complete")

# Root route - Dashboard
@app.get("/")
async def index(request):
    """Main dashboard page"""
    user = await get_current_user(request)
    # Removed authentication check for development
    # if not user:
    #     return RedirectResponse(url="/auth/login")
    
    # Enhanced dashboard with UI components
    return create_page_layout(
        "Dashboard",
        content=[
            Card(
                header=H3("Overview"),
                content=Div(
                    Div(
                        A(
                            Div(
                                H3(str(len(uploaded_datasets)), style="font-size: 2rem; margin: 0; color: #667eea;"),
                                P("Datasets", style="margin: 0; color: #6b7280; font-weight: 500;"),
                                style="text-align: center;"
                            ),
                            href="/datasets",
                            style="text-decoration: none; display: block; padding: 1rem; border-radius: 0.5rem; transition: background-color 0.2s ease;",
                            onmouseover="this.style.backgroundColor='#f8f9fa'",
                            onmouseout="this.style.backgroundColor='transparent'"
                        ),
                        A(
                            Div(
                                H3(str(len(created_prompts)), style="font-size: 2rem; margin: 0; color: #667eea;"),
                                P("Prompts", style="margin: 0; color: #6b7280; font-weight: 500;"),
                                style="text-align: center;"
                            ),
                            href="/prompts",
                            style="text-decoration: none; display: block; padding: 1rem; border-radius: 0.5rem; transition: background-color 0.2s ease;",
                            onmouseover="this.style.backgroundColor='#f8f9fa'",
                            onmouseout="this.style.backgroundColor='transparent'"
                        ),
                        A(
                            Div(
                                H3(str(len(optimization_runs)), style="font-size: 2rem; margin: 0; color: #667eea;"),
                                P("Optimizations", style="margin: 0; color: #6b7280; font-weight: 500;"),
                                style="text-align: center;"
                            ),
                            href="/optimization",
                            style="text-decoration: none; display: block; padding: 1rem; border-radius: 0.5rem; transition: background-color 0.2s ease;",
                            onmouseover="this.style.backgroundColor='#f8f9fa'",
                            onmouseout="this.style.backgroundColor='transparent'"
                        ),
                        style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 1rem;"
                    )
                ),
                nested=True
            ),
            
            Card(
                header=H3("Recent Activity"),
                content=Div(
                    P("Welcome to Nova Prompt Optimizer! Get started by exploring your data and creating optimized prompts.", 
                      style="color: #6b7280; margin-bottom: 1rem;"),
                    Div(
                        A("View All Datasets", href="/datasets", 
                          style="color: #667eea; text-decoration: none; margin-right: 1rem; font-weight: 500;"),
                        A("Browse Prompts", href="/prompts", 
                          style="color: #667eea; text-decoration: none; margin-right: 1rem; font-weight: 500;"),
                        A("View Results", href="/results", 
                          style="color: #667eea; text-decoration: none; font-weight: 500;")
                    )
                ),
                nested=True
            )
        ],
        current_page="dashboard",
        user=user.to_dict() if user else None
    )

# Authentication routes
@app.get("/auth/login")
async def login_page(request):
    """Login page"""
    return create_main_layout(
                    )
                ),
                Card(
                    content=Div(
                        H3(str(len(created_prompts)), style="font-size: 2rem; margin: 0; color: #10b981;"),
                        P("Prompts", style="margin: 0; color: #6b7280; font-weight: 500;"),
                        style="text-align: center;"
                    )
                ),
                Card(
                    content=Div(
                        H3(str(len(optimization_runs)), style="font-size: 2rem; margin: 0; color: #f59e0b;"),
                        P("Optimizations", style="margin: 0; color: #6b7280; font-weight: 500;"),
                        style="text-align: center;"
                    )
                ),
                style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; margin-bottom: 2rem;"
            ),
            
            # Quick Actions Section
            Card(
                header=H3("Quick Actions"),
                content=Div(
                    Div(
                        Button("New Prompt", variant="primary", href="/prompts/new"),
                        Button("Upload Dataset", variant="secondary", href="/datasets/upload"),
                        Button("Start Optimization", variant="outline", href="/optimization/new"),
                        style="display: flex; gap: 1rem; flex-wrap: wrap;"
                    ),
                    style="margin-bottom: 1rem;"
                )
            ),
            
            # Prompt Input Section
            Card(
                header=H3("Quick Prompt Test"),
                content=Div(
                    FormField(
                        "System Prompt",
                        Textarea(
                            placeholder="Enter your system prompt here...",
                            rows=3,
                            name="system_prompt"
                        ),
                        help_text="Define the AI assistant's role and behavior"
                    ),
                    FormField(
                        "User Prompt",
                        Textarea(
                            placeholder="Enter your user prompt here...",
                            rows=4,
                            name="user_prompt"
                        ),
                        help_text="The actual prompt you want to optimize"
                    ),
                    Div(
                        Button("Test Prompt", variant="primary"),
                        Button("Save Draft", variant="ghost"),
                        style="display: flex; gap: 0.5rem;"
                    )
                )
            ),
            
            # System Status Section
            Div(
                Card(
                    header=H3("System Status"),
                    content=Div(
                        Div(
                            Badge("✓ Application Running", variant="success"),
                            Badge("✓ Database Connected", variant="success"),
                            Badge("✓ AWS Configured", variant="success"),
                            style="display: flex; gap: 0.5rem; flex-wrap: wrap; margin-bottom: 1rem;"
                        ),
                        Alert(
                            "All systems are operational. Ready for prompt optimization.",
                            variant="success",
                            title="System Healthy"
                        )
                    )
                ),
                
                Card(
                    header=H3("Recent Activity"),
                    content=Div(
                        P("No recent activity", style="color: #6b7280; font-style: italic;"),
                        Button("View All Activity", variant="outline", size="sm")
                    )
                ),
                
                style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-top: 1rem;"
            ),
            
            # Getting Started Section
            Card(
                header=H3("Getting Started"),
                content=Div(
                    P("New to Nova Prompt Optimizer? Here's how to get started:", 
                      style="margin-bottom: 1rem;"),
                    Ol(
                        Li("Upload or create a dataset for evaluation"),
                        Li("Create a prompt template with variables"),
                        Li("Configure optimization parameters"),
                        Li("Run optimization and review results"),
                        style="margin-left: 1.5rem; line-height: 1.6;"
                    ),
                    Div(
                        Button("View Documentation", variant="outline"),
                        Button("Watch Tutorial", variant="ghost"),
                        style="display: flex; gap: 0.5rem; margin-top: 1rem;"
                    )
                )
            ),
            
            style="max-width: 1200px; margin: 0 auto; padding: 2rem; display: flex; flex-direction: column; gap: 1.5rem;"
        ),
        current_page="dashboard",
        user=user.to_dict() if user else None
    )

# Authentication routes
@app.get("/auth/login")
async def login_page(request):
    """Login page"""
    return create_main_layout(
        "Login - Nova Prompt Optimizer",
        Div(
            Card(
                H2("Welcome to Nova Prompt Optimizer"),
                P("Please sign in to continue"),
                Form(
                    Input(type="text", name="username", placeholder="Username", required=True),
                    Input(type="password", name="password", placeholder="Password", required=True),
                    Button("Sign In", type="submit", cls="primary"),
                    action="/auth/login",
                    method="post",
                    hx_post="/auth/login",
                    hx_target="#main-content"
                ),
                cls="login-card"
            ),
            cls="login-container"
        )
    )

@app.post("/auth/login")
async def login_submit(request):
    """Handle login submission"""
    form = await request.form()
    username = form.get("username")
    password = form.get("password")
    
    # Simple authentication (replace with proper auth)
    if username and password:
        user = await create_user_session(request, username)
        return RedirectResponse(url="/", status_code=303)
    
    return Div(
        P("Invalid credentials", cls="error"),
        hx_swap_oob="true",
        id="error-message"
    )

@app.get("/auth/logout")
async def logout(request):
    """Handle logout"""
    request.session.clear()
    return RedirectResponse(url="/auth/login")

# Health check endpoint
@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "service": "nova-prompt-optimizer-frontend"}

# Favicon route to prevent 404 errors
@app.get("/favicon.ico")
async def favicon():
    """Return a simple favicon response"""
    from starlette.responses import Response
    # Return a simple 1x1 transparent PNG as favicon
    favicon_data = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x08\x06\x00\x00\x00\x1f\x15\xc4\x89\x00\x00\x00\nIDATx\x9cc\x00\x01\x00\x00\x05\x00\x01\r\n-\xdb\x00\x00\x00\x00IEND\xaeB`\x82'
    return Response(favicon_data, media_type="image/png")

# Handle Chrome DevTools and other well-known requests
@app.get("/.well-known/{path:path}")
async def well_known_handler(path: str):
    """Handle .well-known requests from Chrome DevTools"""
    from starlette.responses import JSONResponse
    return JSONResponse({"error": "Not found"}, status_code=404)

# TODO: Implement WebSocket and SSE endpoints
# WebSocket endpoint for real-time collaboration
# @app.websocket("/ws/{room_id}")
# async def websocket_endpoint(websocket, room_id: str):
#     """WebSocket endpoint for real-time collaboration"""
#     await notification_manager.handle_websocket(websocket, room_id)

# Server-Sent Events for real-time updates
# @app.get("/events/{channel}")
# async def sse_endpoint(request, channel: str):
#     """Server-Sent Events endpoint for real-time updates"""
#     return await notification_manager.handle_sse(request, channel)

# TODO: Include route modules when they're converted to FastHTML
# app.include_router(dashboard.router, prefix="/dashboard", tags=["dashboard"])

# TODO: Include these routes when modules are created
# app.include_router(datasets.router, prefix="/datasets", tags=["datasets"])
# app.include_router(prompts.router, prefix="/prompts", tags=["prompts"])
# app.include_router(optimization.router, prefix="/optimization", tags=["optimization"])
# app.include_router(annotation.router, prefix="/annotation", tags=["annotation"])
# app.include_router(results.router, prefix="/results", tags=["results"])
# app.include_router(api.router, prefix="/api", tags=["api"])

# Authentication routes (placeholder)
@app.get("/auth/login")
async def login_page(request):
    """Login page"""
    return create_main_layout(
        "Login",
        Div(
            Div(
                H1("Sign In", style="text-align: center; margin-bottom: 0.5rem;"),
                P("Welcome to Nova Prompt Optimizer", 
                  style="text-align: center; color: #6b7280; margin-bottom: 2rem;"),
                
                Card(
                    content=Form(
                        FormField(
                            "Username",
                            Input(placeholder="Enter your username", name="username", required=True)
                        ),
                        FormField(
                            "Password",
                            Input(type="password", placeholder="Enter your password", 
                                name="password", required=True)
                        ),
                        Div(
                            Button("Sign In", variant="primary", type="submit", 
                                 style="width: 100%;"),
                            style="margin-top: 0.5rem;"
                        ),
                        method="post",
                        action="/auth/login"
                    )
                ),
                
                Div(
                    P("Don't have an account? ", 
                      A("Contact your administrator", href="#", style="color: #000000;")),
                    style="text-align: center; margin-top: 1rem; font-size: 0.875rem; color: #6b7280;"
                ),
                
                style="max-width: 400px; margin: 0 auto;"
            ),
            style="min-height: 60vh; display: flex; align-items: center; padding: 2rem;"
        ),
        current_page="login",
        show_sidebar=False  # Hide sidebar on login page
    )

@app.post("/auth/login")
async def login_submit(request):
    """Handle login submission"""
    form = await request.form()
    username = form.get("username", "")
    password = form.get("password", "")
    
    # Simple authentication for development
    # TODO: Implement proper authentication with database
    if username and password:  # Accept any non-empty username/password
        request.session["user_id"] = f"user-{username}"
        request.session["username"] = username
        return RedirectResponse(url="/", status_code=302)
    else:
        # Return to login with error
        return create_main_layout(
            "Login",
            Div(
                Div(
                    H1("Sign In", style="text-align: center; margin-bottom: 0.5rem;"),
                    P("Welcome to Nova Prompt Optimizer", 
                      style="text-align: center; color: #6b7280; margin-bottom: 2rem;"),
                    
                    Alert(
                        "Please enter both username and password.",
                        variant="error",
                        title="Login Failed"
                    ),
                    
                    Card(
                        content=Form(
                            FormField(
                                "Username",
                                Input(placeholder="Enter your username", name="username", required=True)
                            ),
                            FormField(
                                "Password",
                                Input(type="password", placeholder="Enter your password", 
                                    name="password", required=True)
                            ),
                            Div(
                                Button("Sign In", variant="primary", type="submit", 
                                     style="width: 100%;"),
                                style="margin-top: 0.5rem;"
                            ),
                            method="post",
                            action="/auth/login"
                        )
                    ),
                    
                    Div(
                        P("For development: Use any username and password", 
                          style="text-align: center; font-size: 0.875rem; color: #6b7280;"),
                        style="text-align: center; margin-top: 1rem;"
                    ),
                    
                    style="max-width: 400px; margin: 0 auto;"
                ),
                style="min-height: 60vh; display: flex; align-items: center; padding: 2rem;"
            ),
            current_page="login",
            show_sidebar=False
        )

@app.get("/auth/logout")
async def logout(request):
    """Handle logout"""
    request.session.clear()
    return RedirectResponse(url="/auth/login", status_code=302)

# API endpoint to get datasets count
@app.get("/api/datasets/count")
async def get_datasets_count():
    """Get count of uploaded datasets"""
    return {"count": len(uploaded_datasets)}

# Dataset routes (placeholder)
@app.get("/datasets")
async def datasets_page(request):
    """Datasets main page"""
    user = await get_current_user(request)
    return Html(
        Head(
            Title("Datasets - Nova Prompt Optimizer"),
            Meta(charset="utf-8"),
            Meta(name="viewport", content="width=device-width, initial-scale=1"),
            Link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css"),
            create_navbar_styles(),
            create_ui_styles(),
            create_navbar_script()
        ),
        Body(
            create_navbar("datasets", user.to_dict() if user else None),
            
            Main(
                Div(
                    H1("Datasets", style="margin-bottom: 1rem;"),
                    P("Manage your training and evaluation datasets", 
                      style="color: #6b7280; margin-bottom: 2rem;"),
                    
                    CardContainer(
                        Card(
                            header=H3("Upload New Dataset"),
                            content=Div(
                                P("Upload your training or evaluation datasets to get started with prompt optimization.", 
                                  style="color: #6b7280; margin-bottom: 1rem;"),
                                Div(
                                    Button("Upload Dataset", variant="primary", 
                                           onclick="openUploadModal()",
                                           style="margin-right: 0.5rem;"),
                                    Button("Browse Examples", variant="outline"),
                                    style="display: flex; gap: 0.5rem;"
                                )
                            ),
                            nested=True
                        ),
                        
                        Card(
                            header=H3("Recent Datasets"),
                            content=Div(
                                # Show uploaded datasets if any exist
                                *([
                                    Div(
                                        Div(
                                            H4(dataset["name"], style="margin: 0 0 0.5rem 0; color: #1f2937;"),
                                            P(f"File: {dataset['filename']}", style="margin: 0; color: #6b7280; font-size: 0.875rem;"),
                                            P(f"Size: {dataset['size']} bytes", style="margin: 0; color: #6b7280; font-size: 0.875rem;"),
                                            P(f"Uploaded: {dataset['uploaded_at']}", style="margin: 0; color: #6b7280; font-size: 0.875rem;"),
                                            P(dataset["description"], style="margin: 0.5rem 0 0 0; color: #4b5563; font-size: 0.875rem;"),
                                            style="flex: 1;"
                                        ),
                                        Div(
                                            Badge(dataset["status"], variant="success"),
                                            Div(
                                                Button("Edit", variant="outline", size="sm", 
                                                       href=f"/datasets/edit/{dataset['id']}", style="margin-right: 0.5rem;"),
                                                Form(
                                                    Button("Delete", variant="ghost", size="sm", 
                                                           style="color: #dc2626;", type="submit",
                                                           onclick="return confirm('Are you sure you want to delete this dataset?')"),
                                                    method="post",
                                                    action=f"/datasets/delete/{dataset['id']}",
                                                    style="display: inline;"
                                                ),
                                                style="margin-top: 0.5rem;"
                                            ),
                                            style="text-align: right;"
                                        ),
                                        style="display: flex; justify-content: space-between; align-items: flex-start; padding: 1rem; border: 1px solid #e5e7eb; border-radius: 0.5rem; margin-bottom: 0.5rem;"
                                    ) for dataset in uploaded_datasets
                                ] if uploaded_datasets else [
                                    P("No datasets uploaded yet", style="color: #6b7280; font-style: italic;")
                                ]),
                                Button("Browse Examples", variant="outline", size="sm") if not uploaded_datasets else None
                            ),
                            nested=True
                        )
                    ),
                    
                    cls="card-container",
                    style="display: flex; flex-direction: column; gap: 1.5rem;"
                )
            ),
            
            # Upload Modal
            Div(
                Div(
                    Div(
                        # Modal Header
                        Div(
                            H3("Upload Dataset", style="margin: 0; color: #1f2937;"),
                            Button("×", onclick="closeUploadModal()", 
                                   style="background: none; border: none; font-size: 1.5rem; cursor: pointer; color: #6b7280;"),
                            style="display: flex; justify-content: space-between; align-items: center; padding: 1.5rem; border-bottom: 1px solid #e5e7eb;"
                        ),
                        
                        # Modal Content (iframe to load upload form)
                        Div(
                            Iframe(src="/datasets/upload/modal", 
                                   style="width: 100%; height: 400px; border: none;",
                                   id="upload-iframe"),
                            style="padding: 0;"
                        ),
                        
                        style="background: white; border-radius: 8px; max-width: 600px; width: 90vw; max-height: 90vh; overflow: hidden; box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);"
                    ),
                    style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0, 0, 0, 0.5); display: none; align-items: center; justify-content: center; z-index: 1000;",
                    id="upload-modal",
                    onclick="event.target === this && closeUploadModal()"
                )
            ),
            
            # Modal JavaScript
            Script("""
                function openUploadModal() {
                    console.log('Opening upload modal');
                    document.getElementById('upload-modal').style.display = 'flex';
                    // Reload iframe to ensure fresh form
                    document.getElementById('upload-iframe').src = '/datasets/upload/modal';
                }
                
                function closeUploadModal() {
                    console.log('Closing upload modal');
                    document.getElementById('upload-modal').style.display = 'none';
                }
                
                // Listen for successful upload from iframe
                window.addEventListener('message', function(event) {
                    if (event.data === 'upload-success') {
                        closeUploadModal();
                        // Optionally reload the page to show new dataset
                        location.reload();
                    }
                });
                
                // Close modal on Escape key
                document.addEventListener('keydown', function(event) {
                    if (event.key === 'Escape') {
                        closeUploadModal();
                    }
                });
            """)
        )
    )

@app.get("/datasets/upload/modal")
async def dataset_upload_modal(request):
    """Dataset upload form for modal (no navigation)"""
    return Html(
        Head(
            Title("Upload Dataset"),
            Meta(charset="utf-8"),
            Meta(name="viewport", content="width=device-width, initial-scale=1"),
            Link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css"),
            create_ui_styles()
        ),
        Body(
            Div(
                Alert(
                    "Upload your training or evaluation dataset to get started with prompt optimization.",
                    variant="info",
                    title="Dataset Upload"
                ),
                
                Card(
                    content=Form(
                        FormField(
                            "Dataset File",
                            Input(type="file", accept=".csv,.json,.jsonl", name="dataset", required=True),
                            help_text="Supported formats: CSV, JSON, JSONL (max 10MB)"
                        ),
                        FormField(
                            "Dataset Name",
                            Input(placeholder="My Training Dataset", name="name", required=True)
                        ),
                        FormField(
                            "Description",
                            Textarea(placeholder="Describe your dataset purpose and content...", 
                                   rows=3, name="description")
                        ),
                        Div(
                            Button("Upload Dataset", variant="primary", type="submit"),
                            style="display: flex; gap: 0.5rem;"
                        ),
                        method="post",
                        action="/datasets/upload",
                        enctype="multipart/form-data",
                        id="upload-form"
                    )
                ),
                
                style="padding: 1.5rem;"
            ),
            
            # Script to notify parent window on success
            Script("""
                document.addEventListener('DOMContentLoaded', function() {
                    const form = document.getElementById('upload-form');
                    if (form) {
                        form.addEventListener('submit', function(e) {
                            console.log('Form submitted in modal');
                            // After successful submission, notify parent window
                            setTimeout(function() {
                                if (window.parent && window.parent !== window) {
                                    window.parent.postMessage('upload-success', '*');
                                }
                            }, 1000);
                        });
                    }
                });
            """)
        )
    )
@app.get("/datasets/upload")
async def dataset_upload_page(request):
    """Dataset upload page (full page version)"""
    user = await get_current_user(request)
    return create_main_layout(
        "Upload Dataset",
        Div(
            H1("Upload Dataset", style="margin-bottom: 1rem;"),
            
            Alert(
                "Upload your training or evaluation dataset to get started with prompt optimization.",
                variant="info",
                title="Dataset Upload"
            ),
            
            Card(
                content=Form(
                    FormField(
                        "Dataset File",
                        Input(type="file", accept=".csv,.json,.jsonl", name="dataset", required=True),
                        help_text="Supported formats: CSV, JSON, JSONL (max 10MB)"
                    ),
                    FormField(
                        "Dataset Name",
                        Input(placeholder="My Training Dataset", name="name", required=True)
                    ),
                    FormField(
                        "Description",
                        Textarea(placeholder="Describe your dataset purpose and content...", 
                               rows=3, name="description")
                    ),
                    Div(
                        Input(type="submit", value="Upload Dataset", 
                              style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; padding: 0.5rem 1rem; border-radius: 0.375rem; font-weight: 500; cursor: pointer;"),
                        A("Back to Datasets", href="/datasets", 
                          style="padding: 0.5rem 1rem; text-decoration: none; color: #666; border: 1px solid #ddd; border-radius: 0.375rem;"),
                        style="display: flex; gap: 0.5rem;"
                    ),
                    method="post",
                    action="/datasets/upload",
                    enctype="multipart/form-data",
                    id="upload-form"
                )
            ),
            
            style="max-width: 600px; margin: 0 auto; padding: 2rem;"
        ),
        current_page="datasets",
        user=user.to_dict() if user else None
    )

@app.post("/datasets/upload")
async def dataset_upload_submit(request):
    """Handle dataset upload submission"""
    print("🔍 DEBUG: POST /datasets/upload route hit!")
    
    try:
        form = await request.form()
        print(f"🔍 DEBUG: Form data received: {dict(form)}")
        
        # Get form data (removed input_column and output_column)
        dataset_file = form.get("dataset")
        name = form.get("name", "")
        description = form.get("description", "")
        
        print(f"🔍 DEBUG: Parsed data - name: {name}, description: {description}")
        print(f"🔍 DEBUG: File: {dataset_file}")
        
    except Exception as e:
        print(f"❌ DEBUG: Error processing form: {e}")
        raise
    
    # Simple validation (only file and name required now)
    if not dataset_file or not name:
        # Check if this is from modal (referer contains modal)
        referer = request.headers.get("referer", "")
        is_modal_request = "modal" in referer or request.headers.get("sec-fetch-dest") == "iframe"
        
        if is_modal_request:
            return Html(
                Head(
                    Title("Upload Error"),
                    Meta(charset="utf-8"),
                    Link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css"),
                    create_ui_styles()
                ),
                Body(
                    Div(
                        Alert(
                            "Please provide both a dataset file and name.",
                            variant="error",
                            title="Validation Error"
                        ),
                        Button("Try Again", variant="primary", onclick="window.location.reload()"),
                        style="padding: 1.5rem;"
                    )
                )
            )
        
        # Full page error response for non-modal requests
        user = await get_current_user(request)
        return create_main_layout(
            "Upload Dataset",
            Div(
                H1("Upload Dataset", style="margin-bottom: 1rem;"),
                
                Alert(
                    "Please provide both a dataset file and name.",
                    variant="error",
                    title="Validation Error"
                ),
                
                Card(
                    content=Form(
                        FormField(
                            "Dataset File",
                            Input(type="file", accept=".csv,.json,.jsonl", name="dataset", required=True),
                            help_text="Supported formats: CSV, JSON, JSONL (max 10MB)"
                        ),
                        FormField(
                            "Dataset Name",
                            Input(placeholder="My Training Dataset", name="name", 
                                value=name, required=True)
                        ),
                        FormField(
                            "Description",
                            Textarea(placeholder="Describe your dataset purpose and content...", 
                                   rows=3, name="description", value=description)
                        ),
                        Div(
                            Button("Upload Dataset", variant="primary", type="submit"),
                            Button("Back to Datasets", variant="ghost", href="/datasets"),
                            style="display: flex; gap: 0.5rem;"
                        ),
                        method="post",
                        action="/datasets/upload",
                        enctype="multipart/form-data"
                    )
                ),
                
                style="max-width: 600px; margin: 0 auto; padding: 2rem;"
            ),
            current_page="datasets",
            user=user.to_dict() if user else None
        )
    
    # Get file info (in real app, you'd save the file and process it)
    file_info = {
        "filename": dataset_file.filename if hasattr(dataset_file, 'filename') else "unknown",
        "size": len(await dataset_file.read()) if hasattr(dataset_file, 'read') else 0
    }
    
    # Save dataset info to our in-memory storage
    from datetime import datetime
    dataset_info = {
        "id": len(uploaded_datasets) + 1,
        "name": name,
        "filename": file_info["filename"],
        "size": file_info["size"],
        "description": description or "No description provided",
        "uploaded_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "status": "Ready"
    }
    uploaded_datasets.append(dataset_info)
    save_data()  # Save to file
    print(f"🔍 DEBUG: Saved dataset: {dataset_info}")
    
    # Check if this is from modal
    referer = request.headers.get("referer", "")
    is_modal_request = "modal" in referer or request.headers.get("sec-fetch-dest") == "iframe"
    
    if is_modal_request:
        # Return modal-friendly success response
        return Html(
            Head(
                Title("Upload Success"),
                Meta(charset="utf-8"),
                Link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css"),
                create_ui_styles()
            ),
            Body(
                Div(
                    Alert(
                        f"Your dataset '{name}' has been uploaded successfully!",
                        variant="success",
                        title="Upload Complete"
                    ),
                    
                    Card(
                        header=H4("Dataset Details"),
                        content=Div(
                            P(Strong("Name: "), name),
                            P(Strong("File: "), file_info["filename"]),
                            P(Strong("Size: "), f"{file_info['size']} bytes"),
                            P(Strong("Description: "), description or "None provided"),
                        )
                    ),
                    
                    Div(
                        Button("Close", variant="primary", 
                               onclick="if(window.parent) window.parent.postMessage('upload-success', '*');"),
                        Button("Upload Another", variant="secondary", 
                               onclick="window.location.href='/datasets/upload/modal'"),
                        style="margin-top: 1rem; display: flex; gap: 0.5rem;"
                    ),
                    
                    style="padding: 1.5rem;"
                ),
                
                # Auto-close modal after 3 seconds
                Script("""
                    setTimeout(function() {
                        if (window.parent && window.parent !== window) {
                            window.parent.postMessage('upload-success', '*');
                        }
                    }, 3000);
                """)
            )
        )
    
    # Full page success response for non-modal requests  
    user = await get_current_user(request)
    return create_main_layout(
        "Dataset Uploaded",
        Div(
            H1("Dataset Uploaded Successfully!", style="margin-bottom: 1rem;"),
            
            Alert(
                f"Your dataset '{name}' has been uploaded and is ready for use.",
                variant="success",
                title="Upload Complete"
            ),
            
            Card(
                header=H3("Dataset Details"),
                content=Div(
                    P(Strong("Name: "), name),
                    P(Strong("File: "), file_info["filename"]),
                    P(Strong("Size: "), f"{file_info['size']} bytes"),
                    P(Strong("Description: "), description or "None provided"),
                    Div(
                        Button("Upload Another", variant="primary", href="/datasets/upload"),
                        Button("View All Datasets", variant="secondary", href="/datasets"),
                        Button("Start Optimization", variant="outline", href="/optimization/new"),
                        style="display: flex; gap: 0.5rem; margin-top: 1rem; flex-wrap: wrap;"
                    )
                )
            ),
            
            style="max-width: 600px; margin: 0 auto; padding: 2rem;"
        ),
        current_page="datasets",
        user=user.to_dict() if user else None
    )

@app.get("/prompts")
async def prompts_page(request):
    """Prompts main page"""
    user = await get_current_user(request)
    return create_page_layout(
        title="Prompts",
        content=[
            Card(
                header=H3("Create New Prompt"),
                content=Div(
                    P("Create prompt templates with variables for optimization and testing.", 
                      style="color: #6b7280; margin-bottom: 1rem;"),
                    Div(
                        Button("Create Prompt", variant="primary", 
                               onclick="openPromptModal()",
                               style="margin-right: 0.5rem;"),
                        Button("Browse Templates", variant="outline"),
                        style="display: flex; gap: 0.5rem;"
                    )
                ),
                nested=True
            ),
            
            Card(
                header=H3("Recent Prompts"),
                content=Div(
                    # Show created prompts if any exist
                    *([
                        Div(
                            Div(
                                H4(prompt["name"], style="margin: 0 0 0.5rem 0; color: #1f2937;"),
                                P(f"Type: {prompt['type']}", style="margin: 0; color: #6b7280; font-size: 0.875rem;"),
                                P(f"Variables: {', '.join(prompt['variables']) if prompt['variables'] else 'None'}", style="margin: 0; color: #6b7280; font-size: 0.875rem;"),
                                P(f"Created: {prompt['created_at']}", style="margin: 0; color: #6b7280; font-size: 0.875rem;"),
                                P(prompt["description"], style="margin: 0.5rem 0 0 0; color: #4b5563; font-size: 0.875rem;"),
                                style="flex: 1;"
                            ),
                            Div(
                                Badge(prompt["status"], variant="success"),
                                Div(
                                    Button("Edit", variant="outline", size="sm", 
                                           href=f"/prompts/edit/{prompt['id']}", style="margin-right: 0.5rem;"),
                                    Form(
                                        Button("Delete", variant="ghost", size="sm", 
                                               style="color: #dc2626;", type="submit",
                                               onclick="return confirm('Are you sure you want to delete this prompt?')"),
                                        method="post",
                                        action=f"/prompts/delete/{prompt['id']}",
                                        style="display: inline;"
                                    ),
                                    style="margin-top: 0.5rem;"
                                ),
                                style="text-align: right;"
                            ),
                            style="display: flex; justify-content: space-between; align-items: flex-start; padding: 1rem; border: 1px solid #e5e7eb; border-radius: 0.5rem; margin-bottom: 0.5rem;"
                        ) for prompt in created_prompts
                    ] if created_prompts else [
                        P("No prompts created yet", style="color: #6b7280; font-style: italic;")
                    ]),
                    Button("Browse Templates", variant="outline", size="sm") if not created_prompts else None
                ),
                nested=True
            )
        ],
        current_page="prompts",
        user=user.to_dict() if user else None
    )

@app.get("/prompts/new/modal")
async def prompt_create_modal(request):
    """Prompt creation form for modal (no navigation)"""
    return Html(
        Head(
            Title("Create Prompt"),
            Meta(charset="utf-8"),
            Meta(name="viewport", content="width=device-width, initial-scale=1"),
            Link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css"),
            create_ui_styles()
        ),
        Body(
            Div(
                Alert(
                    "Create a prompt template with variables for optimization and testing.",
                    variant="info",
                    title="Create Prompt"
                ),
                
                Card(
                    content=Form(
                        FormField(
                            "Prompt Name",
                            Input(placeholder="My Optimization Prompt", name="name", required=True),
                            help_text="A descriptive name for your prompt template"
                        ),
                        FormField(
                            "Prompt Type",
                            Select(
                                Option("System + User", value="system_user"),
                                Option("User Only", value="user_only"),
                                Option("System Only", value="system_only"),
                                name="type", required=True
                            ),
                            help_text="Choose the type of prompt template"
                        ),
                        FormField(
                            "System Prompt",
                            Textarea(placeholder="You are a helpful AI assistant that...", 
                                   rows=4, name="system_prompt"),
                            help_text="System-level instructions (optional for user-only prompts)"
                        ),
                        FormField(
                            "User Prompt Template",
                            Textarea(placeholder="Please analyze the following text: {{input}}\n\nProvide your analysis in the following format:\n- Summary: {{summary}}\n- Key points: {{key_points}}", 
                                   rows=6, name="user_prompt", required=True),
                            help_text="Use {{variable_name}} for variables that will be replaced during optimization"
                        ),
                        FormField(
                            "Description",
                            Textarea(placeholder="Describe the purpose and use case of this prompt...", 
                                   rows=3, name="description")
                        ),
                        Div(
                            Button("Create Prompt", variant="primary", type="submit"),
                            style="display: flex; gap: 0.5rem;"
                        ),
                        method="post",
                        action="/prompts/create",
                        id="prompt-form"
                    )
                ),
                
                style="padding: 1.5rem;"
            ),
            
            # Script to notify parent window on success
            Script("""
                document.addEventListener('DOMContentLoaded', function() {
                    const form = document.getElementById('prompt-form');
                    if (form) {
                        form.addEventListener('submit', function(e) {
                            console.log('Prompt form submitted in modal');
                            // After successful submission, notify parent window
                            setTimeout(function() {
                                if (window.parent && window.parent !== window) {
                                    window.parent.postMessage('prompt-success', '*');
                                }
                            }, 1000);
                        });
                    }
                });
            """)
        )
    )

@app.get("/prompts/new")
async def prompts_new_page(request):
    """New prompt creation page"""
    user = await get_current_user(request)
    return create_main_layout(
        "Create New Prompt",
        Div(
            H1("Create New Prompt", style="margin-bottom: 1rem;"),
            
            Alert(
                "Create a new prompt template with variables for optimization.",
                variant="info",
                title="Prompt Creation"
            ),
            
            Card(
                content=Form(
                    FormField(
                        "Prompt Name",
                        Input(placeholder="My Optimization Prompt", name="name", required=True)
                    ),
                    FormField(
                        "System Prompt",
                        Textarea(placeholder="You are a helpful AI assistant...", 
                               rows=4, name="system_prompt"),
                        help_text="Optional system-level instructions"
                    ),
                    FormField(
                        "User Prompt Template",
                        Textarea(placeholder="Please analyze: {{input}}", 
                               rows=6, name="user_prompt", required=True),
                        help_text="Use {{variable}} syntax for template variables"
                    ),
                    Div(
                        Button("Create Prompt", variant="primary", type="submit"),
                        Button("Back to Prompts", variant="ghost", href="/prompts"),
                        style="display: flex; gap: 0.5rem;"
                    ),
                    method="post",
                    action="/prompts/create"
                )
            ),
            
            style="max-width: 600px; margin: 0 auto; padding: 2rem;"
        ),
        current_page="prompts",
        user=user.to_dict() if user else None
    )

@app.get("/prompts/browse")
async def prompts_browse_page(request):
    """Browse existing prompts page"""
    user = await get_current_user(request)
    return create_main_layout(
        "Browse Prompts",
        Div(
            H1("Browse Prompts", style="margin-bottom: 1rem;"),
            P("View and manage your existing prompt templates", 
              style="color: #6b7280; margin-bottom: 2rem;"),
            
            # Search and filter section
            Card(
                header=H3("Search & Filter"),
                content=Div(
                    Div(
                        Input(placeholder="Search prompts...", name="search"),
                        Button("Search", variant="outline"),
                        style="display: flex; gap: 0.5rem; margin-bottom: 1rem;"
                    ),
                    Div(
                        Button("All", variant="ghost", size="sm"),
                        Button("Recent", variant="ghost", size="sm"),
                        Button("Favorites", variant="ghost", size="sm"),
                        style="display: flex; gap: 0.5rem;"
                    )
                )
            ),
            
            # Prompts list
            Card(
                header=H3("Your Prompts"),
                content=Div(
                    # Sample prompt entries (in real app, these would come from database)
                    Div(
                        Div(
                            H4("Sample Analysis Prompt", style="margin: 0 0 0.5rem 0;"),
                            P("Analyze the following text: {{input}}", 
                              style="color: #6b7280; font-size: 0.875rem; margin: 0 0 0.5rem 0;"),
                            Div(
                                Badge("analysis", variant="default"),
                                Badge("text-processing", variant="default"),
                                style="display: flex; gap: 0.25rem; margin-bottom: 0.5rem;"
                            ),
                            Div(
                                Button("Edit", variant="outline", size="sm"),
                                Button("Use", variant="primary", size="sm"),
                                Button("Delete", variant="ghost", size="sm"),
                                style="display: flex; gap: 0.25rem;"
                            ),
                            style="padding: 1rem; border: 1px solid #e5e5e5; border-radius: 6px; margin-bottom: 1rem;"
                        ),
                        
                        Div(
                            H4("Customer Support Template", style="margin: 0 0 0.5rem 0;"),
                            P("You are a helpful customer support agent. Please respond to: {{query}}", 
                              style="color: #6b7280; font-size: 0.875rem; margin: 0 0 0.5rem 0;"),
                            Div(
                                Badge("support", variant="default"),
                                Badge("customer-service", variant="default"),
                                style="display: flex; gap: 0.25rem; margin-bottom: 0.5rem;"
                            ),
                            Div(
                                Button("Edit", variant="outline", size="sm"),
                                Button("Use", variant="primary", size="sm"),
                                Button("Delete", variant="ghost", size="sm"),
                                style="display: flex; gap: 0.25rem;"
                            ),
                            style="padding: 1rem; border: 1px solid #e5e5e5; border-radius: 6px; margin-bottom: 1rem;"
                        ),
                        
                        # Empty state for when no prompts exist
                        Div(
                            P("No prompts found matching your criteria.", 
                              style="color: #6b7280; font-style: italic; text-align: center; margin: 2rem 0;"),
                            Button("Create Your First Prompt", variant="primary", href="/prompts/new"),
                            style="text-align: center; display: none;"  # Hidden by default, show when no results
                        )
                    )
                )
            ),
            
            # Pagination (placeholder)
            Div(
                Button("Previous", variant="outline", disabled=True),
                Span("Page 1 of 1", style="margin: 0 1rem; color: #6b7280;"),
                Button("Next", variant="outline", disabled=True),
                style="display: flex; align-items: center; justify-content: center; margin-top: 1rem;"
            ),
            
            style="max-width: 800px; margin: 0 auto; padding: 2rem; display: flex; flex-direction: column; gap: 1.5rem;"
        ),
        current_page="prompts",
        user=user.to_dict() if user else None
    )

@app.get("/optimization/recent")
async def optimization_recent_page(request):
    """Recent optimizations page"""
    user = await get_current_user(request)
    return create_main_layout(
        "Recent Optimizations",
        Div(
            H1("Recent Optimizations", style="margin-bottom: 1rem;"),
            P("View your recent optimization runs", 
              style="color: #6b7280; margin-bottom: 2rem;"),
            
            Card(
                header=H3("Recent Runs"),
                content=Div(
                    P("No optimization runs yet", style="color: #6b7280; font-style: italic;"),
                    Button("Start New Optimization", variant="primary", href="/optimization/new")
                )
            ),
            
            style="max-width: 800px; margin: 0 auto; padding: 2rem;"
        ),
        current_page="optimization",
        user=user.to_dict() if user else None
    )

@app.post("/prompts/create")
async def prompt_create_submit(request):
    """Handle prompt creation submission"""
    print("🔍 DEBUG: POST /prompts/create route hit!")
    
    try:
        form = await request.form()
        print(f"🔍 DEBUG: Form data received: {dict(form)}")
        
        # Get form data
        name = form.get("name", "")
        prompt_type = form.get("type", "")
        system_prompt = form.get("system_prompt", "")
        user_prompt = form.get("user_prompt", "")
        description = form.get("description", "")
        
        print(f"🔍 DEBUG: Parsed data - name: {name}, type: {prompt_type}")
        print(f"🔍 DEBUG: Current prompts count before: {len(created_prompts)}")
        
    except Exception as e:
        print(f"❌ DEBUG: Error processing form: {e}")
        raise
    
    # Simple validation
    if not name or not prompt_type or not user_prompt:
        print("❌ DEBUG: Validation failed")
        # Check if this is from modal
        referer = request.headers.get("referer", "")
        is_modal_request = "modal" in referer or request.headers.get("sec-fetch-dest") == "iframe"
        
        if is_modal_request:
            return Html(
                Head(
                    Title("Create Error"),
                    Meta(charset="utf-8"),
                    Link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css"),
                    create_ui_styles()
                ),
                Body(
                    Div(
                        Alert(
                            "Please provide prompt name, type, and user prompt template.",
                            variant="error",
                            title="Validation Error"
                        ),
                        Button("Try Again", variant="primary", onclick="window.location.reload()"),
                        style="padding: 1.5rem;"
                    )
                )
            )
    
    # Extract variables from prompts using simple regex
    import re
    variables = set()
    if system_prompt:
        variables.update(re.findall(r'\{\{(\w+)\}\}', system_prompt))
    if user_prompt:
        variables.update(re.findall(r'\{\{(\w+)\}\}', user_prompt))
    
    # Save prompt info to our in-memory storage
    from datetime import datetime
    prompt_info = {
        "id": len(created_prompts) + 1,
        "name": name,
        "type": prompt_type,
        "system_prompt": system_prompt,
        "user_prompt": user_prompt,
        "description": description or "No description provided",
        "variables": list(variables),
        "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "status": "Ready"
    }
    created_prompts.append(prompt_info)
    save_data()  # Save to file
    print(f"🔍 DEBUG: Saved prompt: {prompt_info}")
    print(f"🔍 DEBUG: Current prompts count after: {len(created_prompts)}")
    
    # Check if this is from modal
    referer = request.headers.get("referer", "")
    is_modal_request = "modal" in referer or request.headers.get("sec-fetch-dest") == "iframe"
    print(f"🔍 DEBUG: Is modal request: {is_modal_request}, referer: {referer}")
    
    if is_modal_request:
        # Return modal-friendly success response
        return Html(
            Head(
                Title("Create Success"),
                Meta(charset="utf-8"),
                Link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css"),
                create_ui_styles()
            ),
            Body(
                Div(
                    Alert(
                        f"Your prompt '{name}' has been created successfully!",
                        variant="success",
                        title="Prompt Created"
                    ),
                    
                    Card(
                        header=H4("Prompt Details"),
                        content=Div(
                            P(Strong("Name: "), name),
                            P(Strong("Type: "), prompt_type),
                            P(Strong("Variables: "), ", ".join(variables) if variables else "None"),
                            P(Strong("Description: "), description or "None provided"),
                        )
                    ),
                    
                    Div(
                        Button("Close", variant="primary", 
                               onclick="if(window.parent) window.parent.postMessage('prompt-success', '*');"),
                        Button("Create Another", variant="secondary", 
                               onclick="window.location.href='/prompts/new/modal'"),
                        style="margin-top: 1rem; display: flex; gap: 0.5rem;"
                    ),
                    
                    style="padding: 1.5rem;"
                ),
                
                # Auto-close modal after 3 seconds
                Script("""
                    setTimeout(function() {
                        if (window.parent && window.parent !== window) {
                            window.parent.postMessage('prompt-success', '*');
                        }
                    }, 3000);
                """)
            )
        )
    
    # Full page success response for non-modal requests  
    user = await get_current_user(request)
    return create_main_layout(
        "Prompt Created",
        Div(
            H1("Prompt Created Successfully!", style="margin-bottom: 1rem;"),
            
            Alert(
                f"Your prompt '{name}' has been created and is ready for use.",
                variant="success",
                title="Creation Complete"
            ),
            
            Card(
                header=H3("Prompt Details"),
                content=Div(
                    P(Strong("Name: "), name),
                    P(Strong("Type: "), prompt_type),
                    P(Strong("Variables: "), ", ".join(variables) if variables else "None"),
                    P(Strong("Description: "), description or "None provided"),
                    Div(
                        Button("Create Another", variant="primary", href="/prompts/new"),
                        Button("View All Prompts", variant="secondary", href="/prompts"),
                        Button("Start Optimization", variant="outline", href="/optimization/new"),
                        style="display: flex; gap: 0.5rem; margin-top: 1rem; flex-wrap: wrap;"
                    )
                )
            ),
            
            style="max-width: 600px; margin: 0 auto; padding: 2rem;"
        ),
        current_page="prompts",
        user=user.to_dict() if user else None
    )

# Optimization routes (placeholder)
@app.get("/optimization")
async def optimization_page(request):
    """Optimization main page"""
    user = await get_current_user(request)
    return Html(
        Head(
            Title("Optimization - Nova Prompt Optimizer"),
            Meta(charset="utf-8"),
            Meta(name="viewport", content="width=device-width, initial-scale=1"),
            Link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css"),
            create_navbar_styles(),
            create_ui_styles(),
            create_navbar_script()
        ),
        Body(
            create_navbar("optimization", user.to_dict() if user else None),
            
            Main(
                Div(
                    H1("Optimization", style="margin-bottom: 1rem;"),
                    P("Run prompt optimization workflows to improve performance", 
                      style="color: #6b7280; margin-bottom: 2rem;"),
                    
                    Card(
                        header=H3("Start New Optimization"),
                        content=Div(
                            P("Configure and run optimization workflows using your prompts and datasets.", 
                              style="color: #6b7280; margin-bottom: 1rem;"),
                            Div(
                                Button("Start Optimization", variant="primary", 
                                       onclick="openOptimizationModal()",
                                       style="margin-right: 0.5rem;"),
                                Button("View Templates", variant="outline"),
                                style="display: flex; gap: 0.5rem;"
                            )
                        )
                    ),
                    
                    Card(
                        header=H3("Recent Optimizations"),
                        content=Div(
                            # Show optimization runs if any exist
                            *([
                                Div(
                                    Div(
                                        H4(opt["name"], style="margin: 0 0 0.5rem 0; color: #1f2937;"),
                                        P(f"Prompt: {opt['prompt_name']}", style="margin: 0; color: #6b7280; font-size: 0.875rem;"),
                                        P(f"Dataset: {opt['dataset_name']}", style="margin: 0; color: #6b7280; font-size: 0.875rem;"),
                                        P(f"Records: {opt['max_records']} | Rate: {opt['rate_limit']} RPM", style="margin: 0; color: #6b7280; font-size: 0.875rem;"),
                                        P(f"Started: {opt['started_at']}", style="margin: 0; color: #6b7280; font-size: 0.875rem;"),
                                        P(f"Progress: {opt.get('progress', 0)}%" if opt['status'] not in ['Completed', 'Failed', 'Stopped'] else 
                                          f"Completed: {opt.get('completed_at', 'N/A')}", style="margin: 0; color: #6b7280; font-size: 0.875rem;"),
                                        style="flex: 1;"
                                    ),
                                    Div(
                                        Badge(opt["status"], variant="success" if opt["status"] == "Completed" else ("warning" if opt["status"] == "Running" else "error")),
                                        Div(
                                            A("View Live", href=f"/optimization/live/{opt['id']}", 
                                              style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; padding: 0.375rem 0.75rem; border-radius: 0.375rem; font-weight: 500; text-decoration: none; font-size: 0.875rem; margin-right: 0.5rem; display: inline-block;") if opt["status"] in ["Running", "Initializing", "Preparing Data", "Baseline Evaluation", "Optimizing", "Final Evaluation"] else None,
                                            A("View Results", href=f"/optimization/live/{opt['id']}", 
                                              style="background: transparent; color: #667eea; border: 1px solid #667eea; padding: 0.375rem 0.75rem; border-radius: 0.375rem; font-weight: 500; text-decoration: none; font-size: 0.875rem; margin-right: 0.5rem; display: inline-block;") if opt["status"] == "Completed" else None,
                                            Form(
                                                Button("Stop", variant="ghost", size="sm", style="color: #dc2626;", type="submit",
                                                       onclick="return confirm('Are you sure you want to stop this optimization?')"),
                                                method="post",
                                                action=f"/optimization/stop/{opt['id']}",
                                                style="display: inline;"
                                            ) if opt["status"] in ["Running", "Initializing", "Preparing Data", "Baseline Evaluation", "Optimizing", "Final Evaluation"] else None,
                                            style="margin-top: 0.5rem;"
                                        ),
                                        style="text-align: right;"
                                    ),
                                    style="display: flex; justify-content: space-between; align-items: flex-start; padding: 1rem; border: 1px solid #e5e7eb; border-radius: 0.5rem; margin-bottom: 0.5rem;"
                                ) for opt in optimization_runs
                            ] if optimization_runs else [
                                P("No optimization runs yet", style="color: #6b7280; font-style: italic;")
                            ]),
                            Button("View All Runs", variant="outline", size="sm") if not optimization_runs else None
                        )
                    ),
                    
                    style="max-width: 800px; margin: 0 auto; padding: 2rem; display: flex; flex-direction: column; gap: 1.5rem;"
                )
            ),
            
            # Start Optimization Modal
            Div(
                Div(
                    Div(
                        # Modal Header
                        Div(
                            H3("Start Optimization", style="margin: 0; color: #1f2937;"),
                            Button("×", onclick="closeOptimizationModal()", 
                                   style="background: none; border: none; font-size: 1.5rem; cursor: pointer; color: #6b7280;"),
                            style="display: flex; justify-content: space-between; align-items: center; padding: 1.5rem; border-bottom: 1px solid #e5e7eb;"
                        ),
                        
                        # Modal Content (iframe to load optimization form)
                        Div(
                            Iframe(src="/optimization/start/modal", 
                                   style="width: 100%; height: 600px; border: none;",
                                   id="optimization-iframe"),
                            style="padding: 0;"
                        ),
                        
                        style="background: white; border-radius: 8px; max-width: 800px; width: 90vw; max-height: 90vh; overflow: hidden; box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);"
                    ),
                    style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0, 0, 0, 0.5); display: none; align-items: center; justify-content: center; z-index: 1000;",
                    id="optimization-modal",
                    onclick="event.target === this && closeOptimizationModal()"
                )
            ),
            
            # Modal JavaScript
            Script("""
                function openOptimizationModal() {
                    console.log('Opening optimization modal');
                    document.getElementById('optimization-modal').style.display = 'flex';
                    // Reload iframe to ensure fresh form
                    document.getElementById('optimization-iframe').src = '/optimization/start/modal';
                }
                
                function closeOptimizationModal() {
                    console.log('Closing optimization modal');
                    document.getElementById('optimization-modal').style.display = 'none';
                }
                
                // Listen for successful start from iframe
                window.addEventListener('message', function(event) {
                    if (event.data === 'optimization-success') {
                        closeOptimizationModal();
                        // Optionally reload the page to show new optimization
                        location.reload();
                    }
                });
                
                // Close modal on Escape key
                document.addEventListener('keydown', function(event) {
                    if (event.key === 'Escape') {
                        closeOptimizationModal();
                    }
                });
            """)
        )
    )

@app.get("/optimization/start/modal")
async def optimization_start_modal(request):
    """Optimization start form for modal (no navigation)"""
    return Html(
        Head(
            Title("Start Optimization"),
            Meta(charset="utf-8"),
            Meta(name="viewport", content="width=device-width, initial-scale=1"),
            Link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css"),
            create_ui_styles()
        ),
        Body(
            Div(
                Alert(
                    "Configure your optimization run by selecting a prompt, dataset, and setting parameters.",
                    variant="info",
                    title="Start Optimization"
                ),
                
                Card(
                    content=Form(
                        FormField(
                            "Optimization Name",
                            Input(placeholder="My Optimization Run", name="name", required=True),
                            help_text="A descriptive name for this optimization run"
                        ),
                        FormField(
                            "Select Prompt",
                            Select(
                                Option("Select a prompt...", value="", disabled=True, selected=True),
                                *[Option(f"{prompt['name']} ({prompt['type']})", value=str(prompt['id'])) 
                                  for prompt in created_prompts],
                                name="prompt_id", required=True
                            ),
                            help_text=f"Choose from {len(created_prompts)} available prompts" if created_prompts else "No prompts available - create one first"
                        ),
                        FormField(
                            "Select Dataset",
                            Select(
                                Option("Select a dataset...", value="", disabled=True, selected=True),
                                *[Option(f"{dataset['name']} ({dataset['filename']})", value=str(dataset['id'])) 
                                  for dataset in uploaded_datasets],
                                name="dataset_id", required=True
                            ),
                            help_text=f"Choose from {len(uploaded_datasets)} available datasets" if uploaded_datasets else "No datasets available - upload one first"
                        ),
                        FormField(
                            "Maximum Records",
                            Input(type="number", placeholder="100", name="max_records", 
                                  value="100", min="1", max="10000", required=True),
                            help_text="Maximum number of records to process (1-10,000)"
                        ),
                        FormField(
                            "Rate Limit (RPM)",
                            Input(type="number", placeholder="60", name="rate_limit", 
                                  value="60", min="1", max="1000", required=True),
                            help_text="Requests per minute to the LLM API (1-1,000 RPM)"
                        ),
                        FormField(
                            "Optimization Algorithm",
                            Select(
                                Option("Nova Prompt Optimizer", value="nova_optimizer", selected=True),
                                Option("MIPROv2", value="miprov2"),
                                Option("DSPy Optimizer", value="dspy"),
                                name="algorithm", required=True
                            ),
                            help_text="Choose the optimization algorithm to use"
                        ),
                        FormField(
                            "Description",
                            Textarea(placeholder="Describe the goal of this optimization run...", 
                                   rows=3, name="description"),
                            help_text="Optional description of optimization objectives"
                        ),
                        Div(
                            Button("Start Optimization", variant="primary", type="submit",
                                   disabled=not (created_prompts and uploaded_datasets)),
                            style="display: flex; gap: 0.5rem;"
                        ),
                        method="post",
                        action="/optimization/start",
                        id="optimization-form"
                    )
                ),
                
                # Show warning if no prompts or datasets
                Alert(
                    "You need at least one prompt and one dataset to start an optimization.",
                    variant="warning",
                    title="Missing Requirements"
                ) if not (created_prompts and uploaded_datasets) else None,
                
                style="padding: 1.5rem;"
            ),
            
            # Script to notify parent window on success
            Script("""
                document.addEventListener('DOMContentLoaded', function() {
                    const form = document.getElementById('optimization-form');
                    if (form) {
                        form.addEventListener('submit', function(e) {
                            console.log('Optimization form submitted in modal');
                            // After successful submission, notify parent window
                            setTimeout(function() {
                                if (window.parent && window.parent !== window) {
                                    window.parent.postMessage('optimization-success', '*');
                                }
                            }, 1000);
                        });
                    }
                });
            """)
        )
    )

@app.get("/optimization/new")
async def optimization_new_page(request):
    """New optimization page"""
    user = await get_current_user(request)
    return create_main_layout(
        "New Optimization",
        Div(
            H1("🚀 New Optimization"),
            P("Start a new prompt optimization workflow"),
            A("Back to Optimization", href="/optimization", cls="button secondary")
        ),
        current_page="optimization",
        user=user.to_dict() if user else None
    )

@app.post("/optimization/start")
async def optimization_start_submit(request):
    """Handle optimization start submission"""
    print("🔍 DEBUG: POST /optimization/start route hit!")
    
    try:
        form = await request.form()
        print(f"🔍 DEBUG: Form data received: {dict(form)}")
        
        # Get form data
        name = form.get("name", "")
        prompt_id = form.get("prompt_id", "")
        dataset_id = form.get("dataset_id", "")
        max_records = form.get("max_records", "100")
        rate_limit = form.get("rate_limit", "60")
        algorithm = form.get("algorithm", "nova_optimizer")
        description = form.get("description", "")
        
        print(f"🔍 DEBUG: Parsed data - name: {name}, prompt_id: {prompt_id}, dataset_id: {dataset_id}")
        print(f"🔍 DEBUG: Current optimizations count before: {len(optimization_runs)}")
        
    except Exception as e:
        print(f"❌ DEBUG: Error processing form: {e}")
        raise
    
    # Simple validation
    if not name or not prompt_id or not dataset_id:
        print("❌ DEBUG: Validation failed")
        # Check if this is from modal
        referer = request.headers.get("referer", "")
        is_modal_request = "modal" in referer or request.headers.get("sec-fetch-dest") == "iframe"
        
        if is_modal_request:
            return Html(
                Head(
                    Title("Start Error"),
                    Meta(charset="utf-8"),
                    Link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css"),
                    create_ui_styles()
                ),
                Body(
                    Div(
                        Alert(
                            "Please provide optimization name, select a prompt, and select a dataset.",
                            variant="error",
                            title="Validation Error"
                        ),
                        Button("Try Again", variant="primary", onclick="window.location.reload()"),
                        style="padding: 1.5rem;"
                    )
                )
            )
    
    # Find selected prompt and dataset
    selected_prompt = next((p for p in created_prompts if str(p['id']) == prompt_id), None)
    selected_dataset = next((d for d in uploaded_datasets if str(d['id']) == dataset_id), None)
    
    if not selected_prompt or not selected_dataset:
        print("❌ DEBUG: Prompt or dataset not found")
        return Html(
            Head(
                Title("Start Error"),
                Meta(charset="utf-8"),
                Link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css"),
                create_ui_styles()
            ),
            Body(
                Div(
                    Alert(
                        "Selected prompt or dataset not found. Please try again.",
                        variant="error",
                        title="Not Found"
                    ),
                    Button("Try Again", variant="primary", onclick="window.location.reload()"),
                    style="padding: 1.5rem;"
                )
            )
        )
    
    # Save optimization run to our in-memory storage
    from datetime import datetime
    optimization_info = {
        "id": len(optimization_runs) + 1,
        "name": name,
        "prompt_id": int(prompt_id),
        "prompt_name": selected_prompt['name'],
        "dataset_id": int(dataset_id),
        "dataset_name": selected_dataset['name'],
        "max_records": int(max_records),
        "rate_limit": int(rate_limit),
        "algorithm": algorithm,
        "description": description or "No description provided",
        "started_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "status": "Running",
        "progress": 0
    }
    optimization_runs.append(optimization_info)
    save_data()  # Save to file
    print(f"🔍 DEBUG: Saved optimization: {optimization_info}")
    print(f"🔍 DEBUG: Current optimizations count after: {len(optimization_runs)}")
    
    # Start the background optimization task
    task = asyncio.create_task(run_optimization_background(optimization_info['id']))
    running_tasks[optimization_info['id']] = task
    logger.info(f"🚀 Started background optimization task for: {optimization_info['name']}")
    
    # Check if this is from modal
    referer = request.headers.get("referer", "")
    is_modal_request = "modal" in referer or request.headers.get("sec-fetch-dest") == "iframe"
    print(f"🔍 DEBUG: Is modal request: {is_modal_request}, referer: {referer}")
    
    if is_modal_request:
        # Return modal-friendly success response
        return Html(
            Head(
                Title("Optimization Started"),
                Meta(charset="utf-8"),
                Link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css"),
                create_ui_styles()
            ),
            Body(
                Div(
                    Alert(
                        f"Optimization '{name}' has been started successfully!",
                        variant="success",
                        title="Optimization Started"
                    ),
                    
                    Card(
                        header=H4("Optimization Details"),
                        content=Div(
                            P(Strong("Name: "), name),
                            P(Strong("Prompt: "), selected_prompt['name']),
                            P(Strong("Dataset: "), selected_dataset['name']),
                            P(Strong("Max Records: "), max_records),
                            P(Strong("Rate Limit: "), f"{rate_limit} RPM"),
                            P(Strong("Algorithm: "), algorithm),
                        )
                    ),
                    
                    Div(
                        Button("Close", variant="primary", 
                               onclick="if(window.parent) window.parent.postMessage('optimization-success', '*');"),
                        Button("Start Another", variant="secondary", 
                               onclick="window.location.href='/optimization/start/modal'"),
                        style="margin-top: 1rem; display: flex; gap: 0.5rem;"
                    ),
                    
                    style="padding: 1.5rem;"
                ),
                
                # Auto-close modal after 3 seconds
                Script("""
                    setTimeout(function() {
                        if (window.parent && window.parent !== window) {
                            window.parent.postMessage('optimization-success', '*');
                        }
                    }, 3000);
                """)
            )
        )
    
    # Full page success response for non-modal requests  
    user = await get_current_user(request)
    return create_main_layout(
        "Optimization Started",
        Div(
            H1("Optimization Started Successfully!", style="margin-bottom: 1rem;"),
            
            Alert(
                f"Your optimization '{name}' has been started and is now running.",
                variant="success",
                title="Optimization Running"
            ),
            
            Card(
                header=H3("Optimization Details"),
                content=Div(
                    P(Strong("Name: "), name),
                    P(Strong("Prompt: "), selected_prompt['name']),
                    P(Strong("Dataset: "), selected_dataset['name']),
                    P(Strong("Max Records: "), max_records),
                    P(Strong("Rate Limit: "), f"{rate_limit} RPM"),
                    P(Strong("Algorithm: "), algorithm),
                    Div(
                        Button("Start Another", variant="primary", href="/optimization/start/modal"),
                        Button("View All Optimizations", variant="secondary", href="/optimization"),
                        Button("View Results", variant="outline", href="/results"),
                        style="display: flex; gap: 0.5rem; margin-top: 1rem; flex-wrap: wrap;"
                    )
                )
            ),
            
            style="max-width: 600px; margin: 0 auto; padding: 2rem;"
        ),
        current_page="optimization",
        user=user.to_dict() if user else None
    )

@app.get("/optimization/live/{optimization_id}")
async def optimization_live_page(request):
    """Real-time optimization results page with auto-refresh"""
    optimization_id = int(request.path_params['optimization_id'])
    optimization = next((opt for opt in optimization_runs if opt['id'] == optimization_id), None)
    
    if not optimization:
        return create_main_layout(
            "Optimization Not Found",
            Div(
                H1("Optimization Not Found"),
                P("The requested optimization could not be found."),
                Button("Back to Optimizations", variant="primary", href="/optimization")
            ),
            current_page="optimization"
        )
    
    user = await get_current_user(request)
    return Html(
        Head(
            Title(f"Live Results: {optimization['name']} - Nova Prompt Optimizer"),
            Meta(charset="utf-8"),
            Meta(name="viewport", content="width=device-width, initial-scale=1"),
            Link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css"),
            create_navbar_styles(),
            create_ui_styles(),
            create_navbar_script(),
            Style("""
                /* Shad4FastHTML-inspired styling */
                .log-container {
                    background: #0a0a0a;
                    color: #fafafa;
                    padding: 1rem;
                    border-radius: 0.5rem;
                    font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', 'Courier New', monospace;
                    font-size: 0.875rem;
                    line-height: 1.5;
                    max-height: 400px;
                    overflow-y: auto;
                    border: 1px solid #27272a;
                    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
                }
                
                .log-entry {
                    margin-bottom: 0.25rem;
                    padding: 0.25rem 0;
                    border-bottom: 1px solid rgba(39, 39, 42, 0.3);
                }
                
                .log-entry:last-child {
                    border-bottom: none;
                }
                
                .log-timestamp {
                    color: #71717a;
                    margin-right: 0.75rem;
                    font-weight: 500;
                }
                
                /* Shad4FastHTML Card styling */
                .prompt-card {
                    border: 1px solid #e4e4e7;
                    border-radius: 0.75rem;
                    padding: 1.5rem;
                    margin-bottom: 1.5rem;
                    background: #ffffff;
                    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
                    transition: all 0.2s ease;
                }
                
                .prompt-card:hover {
                    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
                }
                
                .prompt-card.best {
                    border-color: #22c55e;
                    background: #f0fdf4;
                    box-shadow: 0 0 0 1px #22c55e20, 0 1px 3px 0 rgba(0, 0, 0, 0.1);
                }
                
                /* Terminal-style prompt content */
                .prompt-content {
                    background: #0f172a;
                    color: #f8fafc;
                    padding: 1rem;
                    border-radius: 0.5rem;
                    margin: 0.75rem 0;
                    font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', 'Courier New', monospace;
                    font-size: 0.875rem;
                    line-height: 1.6;
                    white-space: pre-wrap;
                    border: 1px solid #1e293b;
                    box-shadow: inset 0 2px 4px 0 rgba(0, 0, 0, 0.06);
                    position: relative;
                }
                
                .prompt-content::before {
                    content: '';
                    position: absolute;
                    top: 0;
                    left: 0;
                    right: 0;
                    height: 1px;
                    background: linear-gradient(90deg, transparent, #334155, transparent);
                }
                
                /* Shad4FastHTML Badge styling */
                .badge {
                    display: inline-flex;
                    align-items: center;
                    border-radius: 9999px;
                    padding: 0.25rem 0.75rem;
                    font-size: 0.75rem;
                    font-weight: 600;
                    line-height: 1;
                    transition: all 0.2s ease;
                    border: 1px solid transparent;
                }
                
                .badge-primary {
                    background: #3b82f6;
                    color: #ffffff;
                }
                
                .badge-success {
                    background: #22c55e;
                    color: #ffffff;
                }
                
                .badge-outline {
                    background: transparent;
                    border-color: #e4e4e7;
                    color: #71717a;
                }
                
                .badge-outline.badge-success {
                    border-color: #22c55e;
                    color: #22c55e;
                    background: #f0fdf4;
                }
                
                /* Progress bar styling */
                .progress-bar {
                    width: 100%;
                    height: 10px;
                    background: #f4f4f5;
                    border-radius: 9999px;
                    overflow: hidden;
                    border: 1px solid #e4e4e7;
                }
                
                .progress-fill {
                    height: 100%;
                    background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
                    transition: width 0.5s ease;
                    border-radius: 9999px;
                }
                
                /* Auto-refresh indicator */
                .auto-refresh {
                    color: #22c55e;
                    font-size: 0.875rem;
                    font-weight: 500;
                    display: flex;
                    align-items: center;
                    gap: 0.5rem;
                }
                
                .auto-refresh::before {
                    content: '●';
                    animation: pulse 2s infinite;
                }
                
                @keyframes pulse {
                    0%, 100% { opacity: 1; }
                    50% { opacity: 0.5; }
                }
                
                /* Performance history cards */
                .performance-card {
                    padding: 1rem;
                    border: 1px solid #e4e4e7;
                    border-radius: 0.5rem;
                    background: #ffffff;
                    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
                    transition: all 0.2s ease;
                }
                
                .performance-card:hover {
                    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
                    transform: translateY(-1px);
                }
                
                .performance-title {
                    font-weight: 600;
                    color: #18181b;
                    margin-bottom: 0.25rem;
                }
                
                .performance-score {
                    color: #3b82f6;
                    font-weight: 500;
                    font-size: 0.875rem;
                }
                
                /* Prompt header styling */
                .prompt-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    margin-bottom: 1rem;
                    padding-bottom: 0.75rem;
                    border-bottom: 1px solid #e4e4e7;
                }
                
                .prompt-title {
                    margin: 0;
                    color: #18181b;
                    font-size: 1.125rem;
                    font-weight: 600;
                }
                
                .prompt-section {
                    margin-bottom: 1rem;
                }
                
                .prompt-label {
                    font-weight: 600;
                    color: #374151;
                    margin-bottom: 0.5rem;
                    display: block;
                    font-size: 0.875rem;
                    text-transform: uppercase;
                    letter-spacing: 0.05em;
                }
            """)
        ),
        Body(
            create_navbar("optimization", user.to_dict() if user else None),
            
            Main(
                Div(
                    H1(f"Live Results: {optimization['name']}", style="margin-bottom: 1rem;"),
                    P(f"Real-time optimization progress and results • Auto-refreshes every 5 seconds • Press 'R' for manual refresh", 
                      style="color: #6b7280; margin-bottom: 2rem;"),
                    
                    # Progress and Status
                    Card(
                        header=Div(
                            H3("Progress"),
                            Div(
                                Span("Auto-refreshing...", cls="auto-refresh", id="refresh-indicator"),
                                Button("Refresh Now", variant="ghost", size="sm", 
                                       onclick="manualRefresh()", style="margin-left: 1rem;"),
                                style="display: flex; align-items: center;"
                            ),
                            style="display: flex; justify-content: space-between; align-items: center;"
                        ),
                        content=Div(
                            Div(
                                Span("Status: ", style="font-weight: 500;"),
                                Span(optimization['status'], id="status-text", style="color: #3b82f6;"),
                                style="margin-bottom: 0.5rem;"
                            ),
                            Div(
                                Span("Progress: ", style="font-weight: 500;"),
                                Span(f"{optimization.get('progress', 0)}%", id="progress-text"),
                                style="margin-bottom: 0.5rem;"
                            ),
                            Div(
                                cls="progress-bar",
                                children=[
                                    Div(cls="progress-fill", id="progress-fill", 
                                        style=f"width: {optimization.get('progress', 0)}%")
                                ]
                            )
                        )
                    ),
                    
                    # Live Log
                    Card(
                        header=H3("Live Log"),
                        content=Div(
                            Div(
                                *[
                                    Div(
                                        Span(update['timestamp'], cls="log-timestamp"),
                                        Span(update['message']),
                                        cls="log-entry"
                                    ) for update in optimization.get('live_updates', [])[-50:]  # Show last 50 entries
                                ],
                                id="log-container", cls="log-container"
                            ),
                            Button("Clear Log", variant="ghost", size="sm", 
                                   onclick="document.getElementById('log-container').innerHTML = '';",
                                   style="margin-top: 0.5rem;")
                        )
                    ),
                    
                    # Prompt Candidates
                    Card(
                        header=H3("Prompt Candidates"),
                        content=Div(
                            P("Prompt variations generated during optimization.", 
                              style="color: #6b7280; margin-bottom: 1rem;") if not optimization.get('candidate_prompts') else None,
                            *[
                                Div(
                                    Div(
                                        H4(prompt['type'], cls="prompt-title"),
                                        Span(f"Score: {prompt['score']:.3f}" if prompt.get('score') is not None else "Evaluating...", 
                                             cls=f"badge badge-{'success' if prompt.get('is_best') else 'primary'}{'outline' if prompt.get('score') is None else ''}"),
                                        cls="prompt-header"
                                    ),
                                    Div(
                                        Span("System Prompt", cls="prompt-label"),
                                        Div(prompt.get('system_prompt', ''), cls="prompt-content"),
                                        cls="prompt-section"
                                    ) if prompt.get('system_prompt') else None,
                                    Div(
                                        Span("User Prompt", cls="prompt-label"),
                                        Div(prompt.get('user_prompt', ''), cls="prompt-content"),
                                        cls="prompt-section"
                                    ),
                                    cls=f"prompt-card{' best' if prompt.get('is_best') else ''}"
                                ) for prompt in optimization.get('candidate_prompts', [])
                            ]
                        )
                    ),
                    
                    # Performance History
                    Card(
                        header=H3("Performance History"),
                        content=Div(
                            P("Performance metrics during optimization.", 
                              style="color: #6b7280; margin-bottom: 1rem;") if not optimization.get('performance_history') else None,
                            Div(
                                *[
                                    Div(
                                        Div(item['iteration'], cls="performance-title"),
                                        Div(f"Score: {item['score']:.3f}", cls="performance-score"),
                                        cls="performance-card"
                                    ) for item in optimization.get('performance_history', [])
                                ],
                                style="display: flex; gap: 1rem; flex-wrap: wrap;"
                            )
                        )
                    ),
                    
                    style="max-width: 1200px; margin: 0 auto; padding: 2rem; display: flex; flex-direction: column; gap: 1.5rem;"
                )
            ),
            
            # Auto-refresh JavaScript with full page content updates
            Script(f"""
                let refreshInterval;
                let isRefreshing = false;
                
                function refreshData() {{
                    if (isRefreshing) return;
                    isRefreshing = true;
                    
                    const indicator = document.getElementById('refresh-indicator');
                    indicator.textContent = 'Refreshing...';
                    indicator.style.color = '#f59e0b';
                    
                    // Reload the entire page to get fresh data
                    window.location.reload();
                }}
                
                function updateProgressOnly() {{
                    if (isRefreshing) return;
                    
                    const indicator = document.getElementById('refresh-indicator');
                    indicator.textContent = 'Updating...';
                    indicator.style.color = '#f59e0b';
                    
                    // Just update progress for quick feedback
                    fetch('/optimization/status/{optimization_id}')
                        .then(response => response.json())
                        .then(data => {{
                            // Update progress
                            document.getElementById('status-text').textContent = data.status;
                            document.getElementById('progress-text').textContent = data.progress + '%';
                            document.getElementById('progress-fill').style.width = data.progress + '%';
                            
                            indicator.textContent = 'Auto-refreshing...';
                            indicator.style.color = '#22c55e';
                            
                            // Stop refreshing if completed
                            if (data.status === 'Completed' || data.status === 'Failed' || data.status === 'Stopped') {{
                                clearInterval(refreshInterval);
                                indicator.textContent = 'Optimization finished';
                                
                                // Final full refresh to show all results
                                setTimeout(() => {{
                                    window.location.reload();
                                }}, 2000);
                            }}
                        }})
                        .catch(error => {{
                            console.error('Progress update error:', error);
                            indicator.textContent = 'Update error';
                            indicator.style.color = '#dc2626';
                        }});
                }}
                
                // Start auto-refresh if optimization is running
                const currentStatus = '{optimization['status']}';
                if (['Running', 'Initializing', 'Preparing Data', 'Baseline Evaluation', 'Optimizing', 'Final Evaluation'].includes(currentStatus)) {{
                    // Full page refresh every 5 seconds
                    refreshInterval = setInterval(refreshData, 5000);
                    
                    // Quick progress updates every 2 seconds between full refreshes
                    setInterval(updateProgressOnly, 2000);
                    
                    // Initial update after 2 seconds
                    setTimeout(updateProgressOnly, 2000);
                    
                    console.log('🔄 Auto-refresh enabled: Full refresh every 5s, progress updates every 2s');
                }} else {{
                    document.getElementById('refresh-indicator').textContent = 'Optimization finished';
                    document.getElementById('refresh-indicator').style.color = '#6b7280';
                }}
                
                // Add manual refresh button functionality
                function manualRefresh() {{
                    const indicator = document.getElementById('refresh-indicator');
                    indicator.textContent = 'Refreshing now...';
                    indicator.style.color = '#3b82f6';
                    window.location.reload();
                }}
                
                // Cleanup on page unload
                window.addEventListener('beforeunload', function() {{
                    if (refreshInterval) {{
                        clearInterval(refreshInterval);
                    }}
                }});
                
                // Add keyboard shortcut for manual refresh (R key)
                document.addEventListener('keydown', function(event) {{
                    if (event.key === 'r' || event.key === 'R') {{
                        if (!event.ctrlKey && !event.metaKey) {{ // Don't interfere with Ctrl+R
                            event.preventDefault();
                            manualRefresh();
                        }}
                    }}
                }});
            """)
        )
    )

@app.get("/optimization/status/{optimization_id}")
async def optimization_status(request):
    """Get optimization status"""
    optimization_id = int(request.path_params['optimization_id'])
    optimization = next((opt for opt in optimization_runs if opt['id'] == optimization_id), None)
    
    if not optimization:
        return {"error": "Optimization not found"}
    
    return {
        "id": optimization['id'],
        "name": optimization['name'],
        "status": optimization['status'],
        "progress": optimization.get('progress', 0),
        "started_at": optimization['started_at'],
        "completed_at": optimization.get('completed_at'),
        "baseline_score": optimization.get('baseline_score'),
        "final_score": optimization.get('final_score'),
        "improvement": optimization.get('improvement'),
        "error": optimization.get('error')
    }

@app.post("/optimization/stop/{optimization_id}")
async def optimization_stop(request):
    """Stop running optimization"""
    optimization_id = int(request.path_params['optimization_id'])
    
    # Cancel the background task
    if optimization_id in running_tasks:
        running_tasks[optimization_id].cancel()
        del running_tasks[optimization_id]
        logger.info(f"🛑 Stopped optimization task {optimization_id}")
    
    # Update optimization status
    optimization = next((opt for opt in optimization_runs if opt['id'] == optimization_id), None)
    if optimization:
        optimization['status'] = 'Stopped'
        save_data()
    
    return RedirectResponse("/optimization", status_code=302)

@app.get("/datasets/edit/{dataset_id}")
async def dataset_edit_page(request):
    """Edit dataset page"""
    dataset_id = int(request.path_params['dataset_id'])
    dataset = next((d for d in uploaded_datasets if d['id'] == dataset_id), None)
    
    if not dataset:
        return create_main_layout(
            "Dataset Not Found",
            Div(
                H1("Dataset Not Found"),
                P("The requested dataset could not be found."),
                Button("Back to Datasets", variant="primary", href="/datasets")
            ),
            current_page="datasets"
        )
    
    user = await get_current_user(request)
    return create_main_layout(
        f"Edit Dataset: {dataset['name']}",
        Div(
            H1(f"Edit Dataset: {dataset['name']}", style="margin-bottom: 1rem;"),
            
            Card(
                content=Form(
                    FormField(
                        "Dataset Name",
                        Input(placeholder="My Dataset", name="name", 
                              value=dataset['name'], required=True)
                    ),
                    FormField(
                        "Description",
                        Textarea(placeholder="Describe your dataset...", 
                               rows=4, name="description", value=dataset['description'])
                    ),
                    P(f"Filename: {dataset['filename']}", style="color: #6b7280; font-size: 0.875rem;"),
                    P(f"Size: {dataset['size']} bytes", style="color: #6b7280; font-size: 0.875rem;"),
                    P(f"Uploaded: {dataset['uploaded_at']}", style="color: #6b7280; font-size: 0.875rem;"),
                    Div(
                        Button("Update Dataset", variant="primary", type="submit"),
                        Button("Cancel", variant="ghost", href="/datasets"),
                        style="display: flex; gap: 0.5rem; margin-top: 1rem;"
                    ),
                    method="post",
                    action=f"/datasets/edit/{dataset_id}"
                )
            ),
            
            style="max-width: 600px; margin: 0 auto; padding: 2rem;"
        ),
        current_page="datasets",
        user=user.to_dict() if user else None
    )

@app.post("/datasets/edit/{dataset_id}")
async def dataset_edit_submit(request):
    """Handle dataset edit submission"""
    dataset_id = int(request.path_params['dataset_id'])
    dataset = next((d for d in uploaded_datasets if d['id'] == dataset_id), None)
    
    if not dataset:
        return RedirectResponse("/datasets", status_code=302)
    
    form = await request.form()
    
    # Update dataset data
    dataset['name'] = form.get("name", dataset['name'])
    dataset['description'] = form.get("description", dataset['description'])
    
    save_data()
    return RedirectResponse("/datasets", status_code=302)

@app.post("/datasets/delete/{dataset_id}")
async def dataset_delete(request):
    """Delete dataset"""
    dataset_id = int(request.path_params['dataset_id'])
    global uploaded_datasets
    uploaded_datasets = [d for d in uploaded_datasets if d['id'] != dataset_id]
    save_data()
    return RedirectResponse("/datasets", status_code=302)

@app.get("/prompts/edit/{prompt_id}")
async def prompt_edit_page(request):
    """Edit prompt page"""
    prompt_id = int(request.path_params['prompt_id'])
    prompt = next((p for p in created_prompts if p['id'] == prompt_id), None)
    
    if not prompt:
        return create_main_layout(
            "Prompt Not Found",
            Div(
                H1("Prompt Not Found"),
                P("The requested prompt could not be found."),
                Button("Back to Prompts", variant="primary", href="/prompts")
            ),
            current_page="prompts"
        )
    
    user = await get_current_user(request)
    return create_main_layout(
        f"Edit Prompt: {prompt['name']}",
        Div(
            H1(f"Edit Prompt: {prompt['name']}", style="margin-bottom: 1rem;"),
            
            Card(
                content=Form(
                    FormField(
                        "Prompt Name",
                        Input(placeholder="My Optimization Prompt", name="name", 
                              value=prompt['name'], required=True)
                    ),
                    FormField(
                        "Prompt Type",
                        Select(
                            Option("System + User", value="system_user", 
                                   selected=prompt['type']=='system_user'),
                            Option("User Only", value="user_only", 
                                   selected=prompt['type']=='user_only'),
                            Option("System Only", value="system_only", 
                                   selected=prompt['type']=='system_only'),
                            name="type", required=True
                        )
                    ),
                    FormField(
                        "System Prompt",
                        Textarea(placeholder="You are a helpful AI assistant...", 
                               rows=4, name="system_prompt", value=prompt['system_prompt'])
                    ),
                    FormField(
                        "User Prompt Template",
                        Textarea(placeholder="Please analyze: {{input}}", 
                               rows=6, name="user_prompt", value=prompt['user_prompt'], required=True)
                    ),
                    FormField(
                        "Description",
                        Textarea(placeholder="Describe the purpose...", 
                               rows=3, name="description", value=prompt['description'])
                    ),
                    Div(
                        Button("Update Prompt", variant="primary", type="submit"),
                        Button("Cancel", variant="ghost", href="/prompts"),
                        style="display: flex; gap: 0.5rem;"
                    ),
                    method="post",
                    action=f"/prompts/edit/{prompt_id}"
                )
            ),
            
            style="max-width: 600px; margin: 0 auto; padding: 2rem;"
        ),
        current_page="prompts",
        user=user.to_dict() if user else None
    )

@app.post("/prompts/edit/{prompt_id}")
async def prompt_edit_submit(request):
    """Handle prompt edit submission"""
    prompt_id = int(request.path_params['prompt_id'])
    prompt = next((p for p in created_prompts if p['id'] == prompt_id), None)
    
    if not prompt:
        return RedirectResponse("/prompts", status_code=302)
    
    form = await request.form()
    
    # Update prompt data
    prompt['name'] = form.get("name", prompt['name'])
    prompt['type'] = form.get("type", prompt['type'])
    prompt['system_prompt'] = form.get("system_prompt", prompt['system_prompt'])
    prompt['user_prompt'] = form.get("user_prompt", prompt['user_prompt'])
    prompt['description'] = form.get("description", prompt['description'])
    
    # Update variables
    import re
    variables = set()
    if prompt['system_prompt']:
        variables.update(re.findall(r'\{\{(\w+)\}\}', prompt['system_prompt']))
    if prompt['user_prompt']:
        variables.update(re.findall(r'\{\{(\w+)\}\}', prompt['user_prompt']))
    prompt['variables'] = list(variables)
    
    save_data()
    return RedirectResponse("/prompts", status_code=302)

@app.post("/prompts/delete/{prompt_id}")
async def prompt_delete(request):
    """Delete prompt"""
    prompt_id = int(request.path_params['prompt_id'])
    global created_prompts
    created_prompts = [p for p in created_prompts if p['id'] != prompt_id]
    save_data()
    return RedirectResponse("/prompts", status_code=302)

# Results routes (placeholder)
@app.get("/results")
async def results_page(request):
    """Results main page"""
    user = await get_current_user(request)
    return Html(
        Head(
            Title("Results - Nova Prompt Optimizer"),
            Meta(charset="utf-8"),
            Meta(name="viewport", content="width=device-width, initial-scale=1"),
            Link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css"),
            create_navbar_styles(),
            create_ui_styles(),
            create_navbar_script()
        ),
        Body(
            create_navbar("results", user.to_dict() if user else None),
            
            Main(
                Div(
                    H1("Results", style="margin-bottom: 1rem;"),
                    P("View and analyze optimization results and performance metrics", 
                      style="color: #6b7280; margin-bottom: 2rem;"),
                    
                    Card(
                        header=H3("Latest Results"),
                        content=Div(
                            P("View the most recent optimization results and performance improvements.", 
                              style="color: #6b7280; margin-bottom: 1rem;"),
                            Div(
                                Button("View Latest", variant="primary", style="margin-right: 0.5rem;"),
                                Button("Compare Results", variant="outline"),
                                style="display: flex; gap: 0.5rem;"
                            )
                        )
                    ),
                    
                    Card(
                        header=H3("Optimization Results"),
                        content=Div(
                            # Show results from completed optimizations
                            *([
                                Div(
                                    Div(
                                        H4(f"Results: {opt['name']}", style="margin: 0 0 0.5rem 0; color: #1f2937;"),
                                        P(f"Prompt: {opt['prompt_name']}", style="margin: 0; color: #6b7280; font-size: 0.875rem;"),
                                        P(f"Dataset: {opt['dataset_name']}", style="margin: 0; color: #6b7280; font-size: 0.875rem;"),
                                        P(f"Records Processed: {opt['max_records']}", style="margin: 0; color: #6b7280; font-size: 0.875rem;"),
                                        P(f"Completed: {opt['started_at']}", style="margin: 0; color: #6b7280; font-size: 0.875rem;"),
                                        style="flex: 1;"
                                    ),
                                    Div(
                                        Badge("Completed", variant="success"),
                                        Div(
                                            Button("View Details", variant="outline", size="sm", style="margin-right: 0.5rem;"),
                                            Button("Download", variant="ghost", size="sm"),
                                            style="margin-top: 0.5rem;"
                                        ),
                                        style="text-align: right;"
                                    ),
                                    style="display: flex; justify-content: space-between; align-items: flex-start; padding: 1rem; border: 1px solid #e5e7eb; border-radius: 0.5rem; margin-bottom: 0.5rem;"
                                ) for opt in optimization_runs if opt.get('status') == 'Completed'
                            ] if any(opt.get('status') == 'Completed' for opt in optimization_runs) else [
                                P("No completed optimizations yet", style="color: #6b7280; font-style: italic;")
                            ]),
                            Button("View All Optimizations", variant="outline", size="sm", href="/optimization") if not any(opt.get('status') == 'Completed' for opt in optimization_runs) else None
                        )
                    ),
                    
                    Card(
                        header=H3("Performance Analytics"),
                        content=Div(
                            P("Analyze performance trends and optimization effectiveness.", 
                              style="color: #6b7280; margin-bottom: 1rem;"),
                            Div(
                                Button("View Analytics", variant="secondary", style="margin-right: 0.5rem;"),
                                Button("Export Data", variant="outline"),
                                style="display: flex; gap: 0.5rem;"
                            )
                        )
                    ),
                    
                    style="max-width: 800px; margin: 0 auto; padding: 2rem; display: flex; flex-direction: column; gap: 1.5rem;"
                )
            )
        )
    )

# Error handlers
@app.exception_handler(404)
async def not_found_handler(request, exc):
    """Custom 404 page"""
    return Html(
        Head(Title("404 - Page Not Found")),
        Body(
            H1("404 - Page Not Found"),
            P("The page you're looking for doesn't exist."),
            A("Go to Dashboard", href="/", style="display: inline-block; padding: 10px 20px; background: #007bff; color: white; text-decoration: none; border-radius: 5px;"),
            style="font-family: Arial, sans-serif; max-width: 600px; margin: 50px auto; padding: 20px; text-align: center;"
        )
    )

@app.exception_handler(500)
async def server_error_handler(request, exc):
    """Custom 500 page"""
    logger.error(f"Server error: {exc}")
    return Html(
        Head(Title("500 - Server Error")),
        Body(
            H1("500 - Server Error"),
            P("Something went wrong. Please try again later."),
            A("Go to Dashboard", href="/", style="display: inline-block; padding: 10px 20px; background: #007bff; color: white; text-decoration: none; border-radius: 5px;"),
            style="font-family: Arial, sans-serif; max-width: 600px; margin: 50px auto; padding: 20px; text-align: center;"
        )
    )

# Development server
if __name__ == "__main__":
    import uvicorn
    import argparse
    
    parser = argparse.ArgumentParser(description="Nova Prompt Optimizer Frontend")
    parser.add_argument("--host", default="127.0.0.1", help="Host to bind to")
    parser.add_argument("--port", type=int, default=8000, help="Port to bind to")
    parser.add_argument("--reload", action="store_true", help="Enable auto-reload")
    parser.add_argument("--workers", type=int, default=1, help="Number of worker processes")
    
    args = parser.parse_args()
    
    logger.info(f"Starting server on {args.host}:{args.port}")
    
    uvicorn.run(
        "app:app",
        host=args.host,
        port=args.port,
        reload=args.reload,
        workers=args.workers if not args.reload else 1,
        log_level="info"
    )
